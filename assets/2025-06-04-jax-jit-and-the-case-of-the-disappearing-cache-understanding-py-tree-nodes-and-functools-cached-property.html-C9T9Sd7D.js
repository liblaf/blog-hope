import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as a,o as t}from"./app-BMihMyie.js";const n={};function h(l,i){return t(),e("div",null,[...i[0]||(i[0]=[a(`<p>When working with <a href="https://github.com/jax-ml/jax" target="_blank" rel="noopener noreferrer">JAX</a>, especially when using <a href="https://docs.jax.dev/en/latest/jit-compilation.html" target="_blank" rel="noopener noreferrer"><code>jax.jit</code></a> for performance, you might encounter some surprising behaviors if you’re not careful about how JAX “sees” and handles your objects. One such area is the interaction between <code>jax.jit</code> and Python’s <a href="https://docs.python.org/3/library/functools.html#functools.cached_property" target="_blank" rel="noopener noreferrer"><code>@functools.cached_property</code></a>. You might find that your property isn’t as “cached” as you expect within JIT-compiled functions.</p><p>Let’s dive into this with some test code.</p><h2 id="the-core-players" tabindex="-1"><a class="header-anchor" href="#the-core-players"><span>The Core Players</span></a></h2><ol><li><strong><a href="https://docs.jax.dev/en/latest/jit-compilation.html" target="_blank" rel="noopener noreferrer"><code>jax.jit</code></a>:</strong> This powerful decorator compiles your Python functions into highly optimized XLA code. A key aspect of JIT is <strong>tracing</strong>. When a function is JIT-compiled, JAX calls it once with abstract representations of the inputs (called “Tracers”). It records all operations performed on these Tracers. The sequence of operations is then compiled.</li><li><strong><a href="https://flax.readthedocs.io/en/latest/api_reference/flax.struct.html#flax.struct.PyTreeNode" target="_blank" rel="noopener noreferrer"><code>flax.struct.PyTreeNode</code></a>:</strong> These are classes that JAX knows how to treat as “PyTrees.” This means JAX can iterate over their attributes (specified as type-annotated fields) and treat them as children in the PyTree structure. This is crucial for JIT, as it needs to know which parts of your object contain JAX arrays or other JAX-compatible data.</li><li><strong><a href="https://docs.python.org/3/library/functools.html#functools.cached_property" target="_blank" rel="noopener noreferrer"><code>@functools.cached_property</code></a>:</strong> This decorator transforms a method of a class into a property whose value is computed once and then cached as an ordinary attribute in the instance’s <code>__dict__</code>. Subsequent accesses retrieve the value from the <code>__dict__</code>.</li></ol><h2 id="scenario-1-jax-jit-on-functools-cached-property" tabindex="-1"><a class="header-anchor" href="#scenario-1-jax-jit-on-functools-cached-property"><span>Scenario 1: <code>jax.jit</code> on <code>@functools.cached_property</code></span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> functools</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> flax.struct</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> jax</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> jax.numpy </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> jnp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Foo</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">flax</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PyTreeNode</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    a: jax.Array</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    @functools</span><span style="--shiki-light:#4078F2;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cached_property</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    @jax</span><span style="--shiki-light:#4078F2;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jit</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # The property itself is JIT-compiled</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; jax.Array:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        jax.debug.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Computing b ...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> jnp.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.a)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">@jax</span><span style="--shiki-light:#4078F2;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jit</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> use_b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; jax.Array:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # print(foo.__dict__) # For debugging, would show only &#39;a&#39; as a Tracer here</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> foo.b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let’s look at the behaviors:</p><h3 id="foo-b-foo-b-outside-jit-context" tabindex="-1"><a class="header-anchor" href="#foo-b-foo-b-outside-jit-context"><span><code>foo.b, foo.b</code> (Outside JIT context)</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">foo </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">jnp.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">ones</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(foo.b) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Prints &quot;Computing b ...&quot;, b is computed</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># \`b\` is now cached in \`foo.__dict__\`</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(foo.b) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Does NOT print &quot;Computing b ...&quot;, uses cached value</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This works as expected. The first call to <code>foo.b</code> computes the sum, prints the message, and stores the result in <code>foo.__dict__[&#39;b&#39;]</code>. The second call finds <code>b</code> in <code>__dict__</code> and returns it directly.</p><h3 id="foo-b-use-b-foo-mixing-jit-and-non-jit" tabindex="-1"><a class="header-anchor" href="#foo-b-use-b-foo-mixing-jit-and-non-jit"><span><code>foo.b, use_b(foo)</code> (Mixing JIT and non-JIT)</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">foo </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">jnp.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">ones</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(foo.b) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Prints &quot;Computing b ...&quot;, b is computed and cached on original foo</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># foo.__dict__ now contains &#39;b&#39;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">use_b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(foo)) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Prints &quot;Computing b ...&quot; AGAIN!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Why the recomputation?</p><ol><li>The first <code>foo.b</code> caches <code>b</code> in the <code>__dict__</code> of the <em>original</em> <code>foo</code> object.</li><li>When <code>use_b(foo)</code> is called, JAX traces it. The <code>foo</code> object passed into <code>use_b</code> is treated as a <code>PyTreeNode</code>. JAX creates an <em>internal representation</em> of <code>foo</code> for tracing purposes. This internal <code>foo</code> only contains the JAX-registered fields (in this case, <code>a</code>, which becomes a Tracer).</li><li>Crucially, the <code>__dict__</code> of the <em>original</em> <code>foo</code> (and its cached <code>b</code>) is <em>not</em> part of the JAX-registered fields. So, the internal <code>foo</code> inside <code>use_b</code> doesn’t have <code>b</code> in its (non-existent or empty) <code>__dict__</code>.</li><li>When <code>foo.b</code> is accessed inside <code>use_b</code>, it’s operating on this internal, traced <code>foo</code>. Since <code>b</code> isn’t cached there, the <code>b</code> property’s code (which is JIT-compiled itself) executes again, printing “Computing b …”.</li></ol><h3 id="use-b-foo-use-b-foo-multiple-jit-calls" tabindex="-1"><a class="header-anchor" href="#use-b-foo-use-b-foo-multiple-jit-calls"><span><code>use_b(foo), use_b(foo)</code> (Multiple JIT calls)</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">foo </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">jnp.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">ones</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">use_b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(foo)) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Prints &quot;Computing b ...&quot;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">use_b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(foo)) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Prints &quot;Computing b ...&quot; AGAIN!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each call to <code>use_b(foo)</code> JIT-compiles (on the first call) or reuses the compiled function. Each time, <code>foo</code> is passed as an input. The caching that <code>@functools.cached_property</code> tries to do (modifying <code>__dict__</code>) happens on an internal, temporary representation of <code>foo</code> <em>within</em> that JITted execution. This cache does not persist across separate calls to <code>use_b</code> because the <code>__dict__</code> is not a returned value or a JAX-managed state.</p><h3 id="use-b-foo-foo-b-jit-call-then-outside-jit" tabindex="-1"><a class="header-anchor" href="#use-b-foo-foo-b-jit-call-then-outside-jit"><span><code>use_b(foo), foo.b</code> (JIT call then outside JIT)</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">foo </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">jnp.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">ones</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">use_b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(foo)) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Prints &quot;Computing b ...&quot;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(foo.b)      </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Prints &quot;Computing b ...&quot; AGAIN!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>use_b(foo)</code> computes <code>b</code> internally, as explained. This does not affect the <code>__dict__</code> of the <em>original, external</em> <code>foo</code> object.</li><li>When <code>foo.b</code> is called on the <em>original</em> <code>foo</code> object, its <code>__dict__</code> does not yet contain <code>b</code> (assuming it wasn’t called before <code>use_b</code>), so it computes again.</li></ol><h3 id="the-root-cause-for-scenario-1" tabindex="-1"><a class="header-anchor" href="#the-root-cause-for-scenario-1"><span>The Root Cause for Scenario 1</span></a></h3><p><code>@functools.cached_property</code> relies on Python’s standard object attribute storage (<code>__dict__</code>). JAX’s tracing mechanism for <code>PyTreeNode</code>s only considers the explicitly defined fields (like <code>a</code>). It doesn’t know about or track changes to the <code>__dict__</code>. When the property <code>b</code> itself is JIT-compiled, the attempt to cache by modifying <code>self.__dict__</code> is a side effect that JAX’s JIT compilation model doesn’t reliably preserve or propagate in the way <code>cached_property</code> expects.</p><h2 id="scenario-2-manual-caching-with-a-pytreenode-field" tabindex="-1"><a class="header-anchor" href="#scenario-2-manual-caching-with-a-pytreenode-field"><span>Scenario 2: Manual Caching with a <code>PyTreeNode</code> Field</span></a></h2><p>Now, let’s look at your second approach, where you manually manage the cache using a field that JAX <em>does</em> know about.</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Foo</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">flax</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PyTreeNode</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">frozen</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># frozen=False allows modification</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    a: jax.Array</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    _c_cache: jax.Array </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> flax.struct.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">field</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">default</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># JAX is aware of this field</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    @</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">property</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # NOT JIT-compiled itself</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; jax.Array:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">._c_cache </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">._c_cache</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        jax.debug.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Computing c ...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">._c_cache </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> jnp.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.a) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Modify the registered field</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">._c_cache</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">@jax</span><span style="--shiki-light:#4078F2;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jit</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> use_c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; jax.Array:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # ic(foo.__dict__) # Would show &#39;a&#39; and &#39;_c_cache&#39; as Tracers</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> foo.c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="foo-c-foo-c-outside-jit-context" tabindex="-1"><a class="header-anchor" href="#foo-c-foo-c-outside-jit-context"><span><code>foo.c, foo.c</code> (Outside JIT context)</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">foo </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">jnp.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">ones</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(foo.c) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Prints &quot;Computing c ...&quot;, _c_cache is populated</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(foo.c) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Does NOT print &quot;Computing c ...&quot;, uses _c_cache</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This works because <code>_c_cache</code> is a regular attribute on the <code>foo</code> instance. The <code>frozen=False</code> on <code>PyTreeNode</code> allows this attribute to be modified.</p><h3 id="foo-c-use-c-foo-mixing-non-jit-property-and-jit-function" tabindex="-1"><a class="header-anchor" href="#foo-c-use-c-foo-mixing-non-jit-property-and-jit-function"><span><code>foo.c, use_c(foo)</code> (Mixing non-JIT property and JIT function)</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">foo </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">jnp.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">ones</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(foo.c) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Prints &quot;Computing c ...&quot;, original foo._c_cache is populated</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Now, original foo has _c_cache set.</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">use_c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(foo)) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Does NOT print &quot;Computing c ...&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is a key difference!</p><ol><li><code>foo.c</code> is called on the original <code>foo</code>. It computes <code>c</code> and stores it in <code>foo._c_cache</code>.</li><li>When <code>use_c(foo)</code> is called, <code>foo</code> is passed to the JIT-compiled function. JAX traces <code>foo</code>, including its registered fields <code>a</code> and <code>_c_cache</code>. The <em>value</em> of <code>_c_cache</code> (which is now the computed sum) is part of the traced inputs.</li><li>Inside <code>use_c</code>, when <code>foo.c</code> is accessed, <code>self</code> is the traced <code>foo</code>. Its <code>_c_cache</code> field already holds the sum (as a traced value). The <code>if self._c_cache is not None:</code> check (which JAX can handle for <code>None</code> or JAX arrays) passes, and the cached value is returned. No recomputation.</li></ol><h3 id="use-c-foo-use-c-foo-multiple-jit-calls" tabindex="-1"><a class="header-anchor" href="#use-c-foo-use-c-foo-multiple-jit-calls"><span><code>use_c(foo), use_c(foo)</code> (Multiple JIT calls)</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">foo </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">jnp.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">ones</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">use_c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(foo)) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Prints &quot;Computing c ...&quot;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">use_c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(foo)) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Prints &quot;Computing c ...&quot; AGAIN!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This recomputes, similar to the <code>use_b</code> case, but for a slightly different reason regarding state.</p><ol><li>First call to <code>use_c(foo)</code>: The <em>original</em> <code>foo</code> object (where <code>_c_cache</code> is initially <code>None</code>) is passed. Inside <code>use_c</code>, <code>foo.c</code> is called.</li><li>The <code>if self._c_cache is not None:</code> check is performed on the <em>traced version</em> of <code>_c_cache</code>, which is <code>None</code>. So, “Computing c …” is printed.</li><li>The line <code>self._c_cache = jnp.sum(self.a)</code> executes. Since <code>_c_cache</code> is a JAX-aware field, this assignment updates the <code>_c_cache</code> of the <em>internal, traced <code>foo</code> object</em> for the duration of this JITted execution.</li><li>However, this modification to the internal <code>_c_cache</code> within <code>use_c</code> does <em>not</em> affect the <code>_c_cache</code> of the <em>original, external</em> <code>foo</code> object unless <code>use_c</code> were to return the modified <code>foo</code> and you were to use that returned instance.</li><li>Second call to <code>use_c(foo)</code>: The <em>same original</em> <code>foo</code> object is passed in again. Its <code>_c_cache</code> is still <code>None</code> (because the first call to <code>use_c</code> didn’t change the external <code>foo</code>). So, the computation happens again.</li></ol><h3 id="use-c-foo-foo-c-jit-call-then-outside-jit" tabindex="-1"><a class="header-anchor" href="#use-c-foo-foo-c-jit-call-then-outside-jit"><span><code>use_c(foo), foo.c</code> (JIT call then outside JIT)</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">foo </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">jnp.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">ones</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">use_c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(foo)) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Prints &quot;Computing c ...&quot;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(foo.c)      </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Prints &quot;Computing c ...&quot; AGAIN!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>use_c(foo)</code> is called. As above, “Computing c …” is printed. The <code>_c_cache</code> of the <em>external</em> <code>foo</code> object remains <code>None</code>.</li><li>When <code>foo.c</code> is called on the <em>original, external</em> <code>foo</code> object, its <code>_c_cache</code> is still <code>None</code>, so it computes again.</li></ol><h3 id="why-the-manual-cache-c-cache-behaves-this-way" tabindex="-1"><a class="header-anchor" href="#why-the-manual-cache-c-cache-behaves-this-way"><span>Why the Manual Cache (<code>_c_cache</code>) Behaves This Way</span></a></h3><ul><li><strong>Visibility to JAX</strong>: Because <code>_c_cache</code> is a registered field in the <code>PyTreeNode</code>, JAX includes it in its tracing process. When <code>foo</code> is an input to a JITted function, the <em>current value</em> of <code>foo._c_cache</code> is made available to the traced function.</li><li><strong>Side Effects in JIT</strong>: JITted functions are ideally pure from JAX’s perspective. Modifying an input object’s attribute (like <code>_c_cache = ...</code> inside the property <code>c</code> when called from <code>use_c</code>) is a side effect. <ul><li>When <code>c</code> is called from <code>use_c</code>, the property <code>c</code> itself is <em>not</em> JIT-compiled. It executes as regular Python code <em>during the JIT trace or execution of <code>use_c</code></em>.</li><li>The assignment <code>self._c_cache = ...</code> happens on the <em>traced</em> representation of <code>foo</code>. This update is visible <em>within the current execution</em> of the JITted function <code>use_c</code>.</li><li>However, this internal update doesn’t automatically propagate back to the original Python object <code>foo</code> that was passed into <code>use_c</code>. JAX usually requires you to explicitly return modified objects if you want to see their changes outside the JITted function.</li></ul></li></ul><h2 id="key-takeaways-best-practices" tabindex="-1"><a class="header-anchor" href="#key-takeaways-best-practices"><span>Key Takeaways &amp; Best Practices</span></a></h2><ol><li><strong>JIT and Instance State:</strong> <code>jax.jit</code> primarily cares about the data in the registered fields of your <code>PyTreeNode</code>s. Python’s internal mechanisms like <code>__dict__</code> (used by <code>functools.cached_property</code>) are generally opaque to JIT and are not part of the traced state of a <code>PyTreeNode</code>.</li><li><strong>Caching Scope:</strong><ul><li><code>@functools.cached_property</code>: Caching works reliably outside JIT. Inside JIT, or when the property itself is JITted, its reliance on <code>__dict__</code> makes it behave unexpectedly because <code>__dict__</code> isn’t a JAX-traced field.</li><li><strong>Manual Cache Field</strong>: If the cache is a JAX-registered field (like <code>_c_cache</code>): <ul><li>If populated <em>before</em> calling the JITted function, the JITted function will see the cached value.</li><li>If the caching logic (property setter) is called <em>from within</em> a JITted function, it modifies an <em>internal, traced version</em> of the object. This change doesn’t affect the original external object or persist to subsequent independent calls to the JITted function with the same original object, unless you explicitly return the modified object from the JITted function and use that returned instance for further operations.</li></ul></li></ul></li><li><strong>Purity and Side Effects:</strong> JAX prefers pure functions (functions that don’t have side effects). Modifying an object’s state within a JITted function is a side effect. While JAX can sometimes handle updates to its own registered fields (like <code>_c_cache</code>), it’s often clearer to design JITted functions to take inputs and produce outputs, with state updates handled by passing modified objects out of the function.</li></ol><h2 id="in-conclusion" tabindex="-1"><a class="header-anchor" href="#in-conclusion"><span>In Conclusion</span></a></h2><p>When you want to cache computations in JAX objects that interact with <code>jax.jit</code>:</p><ul><li>Avoid <code>@functools.cached_property</code> if the property is accessed within JIT-compiled code or if the property itself is JIT-compiled, as its caching mechanism is invisible to JAX’s tracing.</li><li>Using a manual cache field (like <code>_c_cache</code>) makes the cached data visible to JAX.</li><li>Be mindful that modifications to such fields <em>within</em> a JITted function call are typically on an internal representation and won’t update the original external object unless that object is returned by the JITted function.</li><li>For robust state management within JIT, especially for things like model parameters or optimizer states, consider Flax’s <code>Module</code> system, which has its own mechanisms for handling state (<code>variables</code>, <code>sow</code>) that are designed to work correctly with JAX transformations.</li></ul><p>Understanding how JAX traces and handles PyTreeNodes is key to avoiding these caching conundrums and writing effective JAX code!</p>`,47)])])}const c=s(n,[["render",h]]),r=JSON.parse('{"path":"/2025/2025-06-04-jax-jit-and-the-case-of-the-disappearing-cache-understanding-py-tree-nodes-and-functools-cached-property.html","title":"JAX JIT and the Case of the Disappearing Cache: Understanding `PyTreeNodes` and `functools.cached_property`","lang":"en-US","frontmatter":{"date":"2025-06-04T14:02:00.000Z","modified":"2025-09-20T10:38:01.000Z","tags":["JAX","JIT","Programming/Python"],"title":"JAX JIT and the Case of the Disappearing Cache: Understanding `PyTreeNodes` and `functools.cached_property`","description":"When working with JAX, especially when using jax.jit for performance, you might encounter some surprising behaviors if you’re not careful about how JAX “sees” and handles your o...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JAX JIT and the Case of the Disappearing Cache: Understanding `PyTreeNodes` and `functools.cached_property`\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-04T14:02:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://github.com/liblaf\\"}]}"],["meta",{"property":"og:url","content":"https://hope.liblaf.me/2025/2025-06-04-jax-jit-and-the-case-of-the-disappearing-cache-understanding-py-tree-nodes-and-functools-cached-property.html"}],["meta",{"property":"og:site_name","content":"liblaf"}],["meta",{"property":"og:title","content":"JAX JIT and the Case of the Disappearing Cache: Understanding `PyTreeNodes` and `functools.cached_property`"}],["meta",{"property":"og:description","content":"When working with JAX, especially when using jax.jit for performance, you might encounter some surprising behaviors if you’re not careful about how JAX “sees” and handles your o..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:tag","content":"Programming/Python"}],["meta",{"property":"article:tag","content":"JIT"}],["meta",{"property":"article:tag","content":"JAX"}],["meta",{"property":"article:published_time","content":"2025-06-04T14:02:00.000Z"}]]},"git":{},"readingTime":{"minutes":6.69,"words":2007},"filePathRelative":"2025/2025-06-04-jax-jit-and-the-case-of-the-disappearing-cache-understanding-py-tree-nodes-and-functools-cached-property.md","excerpt":"<p>When working with <a href=\\"https://github.com/jax-ml/jax\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JAX</a>, especially when using <a href=\\"https://docs.jax.dev/en/latest/jit-compilation.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>jax.jit</code></a> for performance, you might encounter some surprising behaviors if you’re not careful about how JAX “sees” and handles your objects. One such area is the interaction between <code>jax.jit</code> and Python’s <a href=\\"https://docs.python.org/3/library/functools.html#functools.cached_property\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>@functools.cached_property</code></a>. You might find that your property isn’t as “cached” as you expect within JIT-compiled functions.</p>","autoDesc":true}');export{c as comp,r as data};
