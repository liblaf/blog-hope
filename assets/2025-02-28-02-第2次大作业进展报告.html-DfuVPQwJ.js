import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as e}from"./app-BMihMyie.js";const t={};function l(h,i){return e(),a("div",null,[...i[0]||(i[0]=[n(`<h1 id="实现三阶魔方的操作与动画" tabindex="-1"><a class="header-anchor" href="#实现三阶魔方的操作与动画"><span>实现三阶魔方的操作与动画</span></a></h1><p>[TOC]</p><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><p>请编写带有图形界面的普通三阶魔方模拟程序.</p><p>要求:</p><ul><li>实现平移、放大、缩小和自适应大小的魔方展示功能.</li><li>请自定义编码表示魔方的各种可能操作, 每种编码表示其中 1 种操作.</li><li>实现打开文本文件的功能, 该文本文件由一系列编码组成, 对应魔方操作.</li><li>实现魔方操作功能: 可以交互实现每个操作, 也可以通过动画自动播放魔方的系列操作.</li><li>在操作或转动魔方时, 必须以动画的形式展示, 从而方便看清如何操作或转动.</li><li>可以保存魔方操作, 保存结果是由一系列编码组成文本文件.</li><li>编写文档详细介绍模拟算法与图形界面等内容.</li></ul><p>参考:</p><ul><li>雍俊海. 清华教授的小课堂魔方真好玩. 北京: 清华大学出版社.</li></ul><h2 id="_1-构建系统与包管理" tabindex="-1"><a class="header-anchor" href="#_1-构建系统与包管理"><span>1. 构建系统与包管理</span></a></h2><h3 id="_1-1-xmake-xrepo" tabindex="-1"><a class="header-anchor" href="#_1-1-xmake-xrepo"><span>1.1 xmake &amp; xrepo</span></a></h3><p><strong>工具定位</strong>:</p><ul><li>xmake: 新一代跨平台构建工具, 采用 Lua 语法编写构建规则</li><li>xrepo: xmake 生态的跨平台包管理器</li></ul><p><strong>选择理由</strong>:</p><ul><li>相比 CMake 更简洁的配置语法 (<code>xmake.lua</code> vs <code>CMakeLists.txt</code>)</li><li>内置依赖管理, 无需额外工具链</li><li>支持交叉编译和多种工具链</li><li>集成包管理功能, 降低依赖管理成本</li></ul><p><strong>典型配置</strong>:</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-lua"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add_requires</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;glm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;fmt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;imgui v1.89&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 声明依赖</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;RubikCube&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    set_kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;binary&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    add_packages</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;glm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;fmt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;imgui&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 链接依赖</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    add_files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;src/*.cpp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)                  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 添加源文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-ccache" tabindex="-1"><a class="header-anchor" href="#_1-2-ccache"><span>1.2 ccache</span></a></h3><p><strong>作用机制</strong>:</p><ul><li>通过缓存编译中间结果, 加速重复编译过程</li><li>采用哈希校验机制保证缓存一致性<br><strong>集成方式</strong>:</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xmake</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> f</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --ccache=enable</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 启用缓存</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xmake</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -j8</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          # 并行编译</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-代码质量保障体系" tabindex="-1"><a class="header-anchor" href="#_2-代码质量保障体系"><span>2. 代码质量保障体系</span></a></h2><h3 id="_2-1-代码格式化" tabindex="-1"><a class="header-anchor" href="#_2-1-代码格式化"><span>2.1 代码格式化</span></a></h3><p><strong>工具链配置</strong>:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># .clang-format</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">BasedOnStyle:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Google</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">IndentWidth:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ColumnLimit:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 120</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-sanitizers" tabindex="-1"><a class="header-anchor" href="#_2-2-sanitizers"><span>2.2 Sanitizers</span></a></h3><table><thead><tr><th>检测类型</th><th>检测范围</th></tr></thead><tbody><tr><td>AddressSanitizer</td><td>内存越界, 使用释放内存</td></tr><tr><td>UndefinedBehavior</td><td>未定义行为 (除零, 空指针等)</td></tr><tr><td>LeakSanitizer</td><td>内存泄漏</td></tr></tbody></table><h3 id="_2-3-静态分析" tabindex="-1"><a class="header-anchor" href="#_2-3-静态分析"><span>2.3 静态分析</span></a></h3><table><thead><tr><th>工具</th><th>检测能力</th></tr></thead><tbody><tr><td>clang-tidy</td><td>代码质量分析</td></tr><tr><td>iwyu</td><td>头文件包含优化</td></tr><tr><td>cppcheck</td><td>代码质量分析</td></tr></tbody></table><h2 id="_3-核心功能库选型" tabindex="-1"><a class="header-anchor" href="#_3-核心功能库选型"><span>3. 核心功能库选型</span></a></h2><h3 id="_3-1-3d-渲染引擎-polyscope" tabindex="-1"><a class="header-anchor" href="#_3-1-3d-渲染引擎-polyscope"><span>3.1 3D 渲染引擎 - Polyscope</span></a></h3><p><strong>核心特性</strong>:</p><ul><li>基于 OpenGL 的轻量级可视化框架</li><li>内置相机控制系统 (旋转/平移/缩放)</li><li>支持实时表面网格渲染</li><li>提供即时模式 GUI 集成</li></ul><p><strong>魔方应用</strong>:</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建立方体单元</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">polyscope::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SurfaceMesh</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> add_cube</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(std::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, glm::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">vec3</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> center</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">glm::vec3</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> vertices </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {...};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;size_t&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> faces </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {...};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> polyscope::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">registerSurfaceMesh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name, vertices, faces);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-数学库-glm" tabindex="-1"><a class="header-anchor" href="#_3-2-数学库-glm"><span>3.2 数学库 - GLM</span></a></h3><p><strong>功能矩阵</strong>:</p><ul><li>提供仿射变换矩阵运算: <code>glm::rotate()</code>, <code>glm::translate()</code></li><li>支持四元数旋转插值: <code>glm::slerp()</code></li><li>类型安全向量运算: <code>glm::vec3</code>, <code>glm::mat4</code></li></ul><p><strong>动画实现</strong>:</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 立方体旋转插值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">glm::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">mat4</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> interpolateRotation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    glm::quat start </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    glm::quat end </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> glm::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mat4_cast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">glm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">slerp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(start, end, t));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-用户界面-imgui" tabindex="-1"><a class="header-anchor" href="#_3-3-用户界面-imgui"><span>3.3 用户界面 - ImGui</span></a></h3><p>本程序采用纯键盘交互模式, 通过 ImGui 输入系统实现以下核心交互逻辑:</p><h4 id="_3-3-1-操作映射表" tabindex="-1"><a class="header-anchor" href="#_3-3-1-操作映射表"><span>3.3.1. 操作映射表</span></a></h4><table><thead><tr><th>物理按键</th><th>魔方操作语义</th><th>动画参数</th></tr></thead><tbody><tr><td><code>F</code></td><td>前面顺时针 90 度</td><td>axis: +Z, angle: 90°</td></tr><tr><td><code>Shift</code>+<code>F</code></td><td>前面逆时针 90 度</td><td>axis: +Z, angle:-90°</td></tr><tr><td><code>R</code></td><td>右面顺时针 90 度</td><td>axis: +X, angle: 90°</td></tr><tr><td><code>Shift</code>+<code>R</code></td><td>右面逆时针 90 度</td><td>axis: +X, angle:-90°</td></tr><tr><td><code>U</code>/<code>D</code>/<code>L</code>/<code>B</code></td><td>类似映射（各面轴系不同）</td><td>…</td></tr></tbody></table><h4 id="_3-3-2-输入处理核心逻辑" tabindex="-1"><a class="header-anchor" href="#_3-3-2-输入处理核心逻辑"><span>3.3.2. 输入处理核心逻辑</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> processInput</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ImGuiIO</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> io </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ImGui::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetIO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> checkRotation </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">](</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ImGuiKey</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Face</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> face</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">KeysDown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[key] </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">WantCaptureKeyboard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> reverse </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">KeyShift</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            executeRotation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(face, reverse);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">KeysDown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[key] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 防止重复触发</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    checkRotation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ImGuiKey_F, FRONT);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    checkRotation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ImGuiKey_B, BACK);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    checkRotation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ImGuiKey_U, UP);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    checkRotation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ImGuiKey_D, DOWN);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    checkRotation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ImGuiKey_L, LEFT);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    checkRotation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ImGuiKey_R, RIGHT);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-3-防冲突机制" tabindex="-1"><a class="header-anchor" href="#_3-3-3-防冲突机制"><span>3.3.3. 防冲突机制</span></a></h4><ol><li><strong>WantCaptureKeyboard 检测:</strong> 仅在 ImGui 无焦点时响应魔方操作</li><li><strong>去抖动处理:</strong> 操作执行后立即清除键位状态</li><li><strong>动画锁:</strong> 旋转动画执行期间禁用新输入</li></ol><h3 id="_3-4-辅助工具库" tabindex="-1"><a class="header-anchor" href="#_3-4-辅助工具库"><span>3.4 辅助工具库</span></a></h3><table><thead><tr><th>库名称</th><th>功能定位</th></tr></thead><tbody><tr><td>spdlog</td><td>日志记录</td></tr><tr><td>fmt</td><td>类型安全字符串格式化</td></tr><tr><td>dbg-macro</td><td>调试信息输出</td></tr></tbody></table><h2 id="_5-文档生成" tabindex="-1"><a class="header-anchor" href="#_5-文档生成"><span>5. 文档生成</span></a></h2><h3 id="_5-1-doxygen-配置" tabindex="-1"><a class="header-anchor" href="#_5-1-doxygen-配置"><span>5.1 Doxygen 配置</span></a></h3><div class="language-doxygen line-numbers-mode" data-highlighter="shiki" data-ext="doxygen" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-doxygen"><span class="line"><span># Doxyfile</span></span>
<span class="line"><span>PROJECT_NAME           = &quot;Rubik&#39;s Cube&quot;</span></span>
<span class="line"><span>INPUT                  = src/ include/</span></span>
<span class="line"><span>RECURSIVE              = YES</span></span>
<span class="line"><span>EXTRACT_ALL            = YES</span></span>
<span class="line"><span>GENERATE_LATEX         = NO</span></span>
<span class="line"><span>USE_MDFILE_AS_MAINPAGE = README.md</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>文档生成命令</strong>:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">doxygen</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Doxyfile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_6-项目目录结构" tabindex="-1"><a class="header-anchor" href="#_6-项目目录结构"><span>6. 项目目录结构</span></a></h3><div class="language-make line-numbers-mode" data-highlighter="shiki" data-ext="make" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-make"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">rubiks-cube/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">├── src/             </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 源代码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">├── tests/           </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 单元测试</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">├── scripts/         </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 构建脚本</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">├── docs/            </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 文档</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">├── xmake.lua        </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 构建配置</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">└── .github/         </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># CI/CD配置</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本环境配置通过严格的工具链集成, 实现了从代码编写, 质量验证到可视化呈现的全流程支持, 为魔方模拟程序的开发提供了可靠的技术保障. 各组件间通过 xmake 构建系统深度整合, 确保跨平台开发体验的一致性.</p>`,57)])])}const p=s(t,[["render",l]]),r=JSON.parse('{"path":"/PhD/course/2024-2025_Spring_Term/84100253-Computer_Aided_Geometry_Modeling/2025-02-28-02-%E7%AC%AC2%E6%AC%A1%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%BF%9B%E5%B1%95%E6%8A%A5%E5%91%8A.html","title":"第 2 次大作业进展报告","lang":"en-US","frontmatter":{"date":"2025-02-28T08:05:00.000Z","header":"Computer Aided Geometry Modeling (84100253-0)","modified":"2025-09-20T10:41:36.000Z","tags":["PhD/Course/Computer_Aided_Geometry_Modeling"],"title":"第 2 次大作业进展报告","description":"实现三阶魔方的操作与动画 [TOC] 问题 请编写带有图形界面的普通三阶魔方模拟程序. 要求: 实现平移、放大、缩小和自适应大小的魔方展示功能. 请自定义编码表示魔方的各种可能操作, 每种编码表示其中 1 种操作. 实现打开文本文件的功能, 该文本文件由一系列编码组成, 对应魔方操作. 实现魔方操作功能: 可以交互实现每个操作, 也可以通过动画自动播放...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第 2 次大作业进展报告\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-28T08:05:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://github.com/liblaf\\"}]}"],["meta",{"property":"og:url","content":"https://hope.liblaf.me/PhD/course/2024-2025_Spring_Term/84100253-Computer_Aided_Geometry_Modeling/2025-02-28-02-%E7%AC%AC2%E6%AC%A1%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%BF%9B%E5%B1%95%E6%8A%A5%E5%91%8A.html"}],["meta",{"property":"og:site_name","content":"liblaf"}],["meta",{"property":"og:title","content":"第 2 次大作业进展报告"}],["meta",{"property":"og:description","content":"实现三阶魔方的操作与动画 [TOC] 问题 请编写带有图形界面的普通三阶魔方模拟程序. 要求: 实现平移、放大、缩小和自适应大小的魔方展示功能. 请自定义编码表示魔方的各种可能操作, 每种编码表示其中 1 种操作. 实现打开文本文件的功能, 该文本文件由一系列编码组成, 对应魔方操作. 实现魔方操作功能: 可以交互实现每个操作, 也可以通过动画自动播放..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:tag","content":"PhD/Course/Computer_Aided_Geometry_Modeling"}],["meta",{"property":"article:published_time","content":"2025-02-28T08:05:00.000Z"}]]},"git":{},"readingTime":{"minutes":4.11,"words":1233},"filePathRelative":"PhD/course/2024-2025_Spring_Term/84100253-Computer_Aided_Geometry_Modeling/2025-02-28-02-第2次大作业进展报告.md","excerpt":"\\n<p>[TOC]</p>\\n<h2>问题</h2>\\n<p>请编写带有图形界面的普通三阶魔方模拟程序.</p>\\n<p>要求:</p>\\n<ul>\\n<li>实现平移、放大、缩小和自适应大小的魔方展示功能.</li>\\n<li>请自定义编码表示魔方的各种可能操作, 每种编码表示其中 1 种操作.</li>\\n<li>实现打开文本文件的功能, 该文本文件由一系列编码组成, 对应魔方操作.</li>\\n<li>实现魔方操作功能: 可以交互实现每个操作, 也可以通过动画自动播放魔方的系列操作.</li>\\n<li>在操作或转动魔方时, 必须以动画的形式展示, 从而方便看清如何操作或转动.</li>\\n<li>可以保存魔方操作, 保存结果是由一系列编码组成文本文件.</li>\\n<li>编写文档详细介绍模拟算法与图形界面等内容.</li>\\n</ul>","autoDesc":true}');export{p as comp,r as data};
