import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as n}from"./app-BMihMyie.js";const l={};function t(h,i){return n(),a("div",null,[...i[0]||(i[0]=[e(`<p>@slidestart</p><h2 id="alphazero-大作业展示" tabindex="-1"><a class="header-anchor" href="#alphazero-大作业展示"><span>AlphaZero 大作业展示</span></a></h2><hr><h2 id="实现思路" tabindex="-1"><a class="header-anchor" href="#实现思路"><span>实现思路</span></a></h2><p>–</p><h3 id="mcts" tabindex="-1"><a class="header-anchor" href="#mcts"><span>MCTS</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> get_action_probs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">board</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> player</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> training:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        repeat search num_sim times</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> policy predicted by NNet</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> search</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">board</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> visited:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        policy, value </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> NNet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(board)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">        update_statistics</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(board, probabilities, value)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">value</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    action </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> argmax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(mean</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">value)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    value </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> search</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(board, action))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    update_statistics</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(board, action, value)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">value</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>–</p><h3 id="neural-network" tabindex="-1"><a class="header-anchor" href="#neural-network"><span>Neural Network</span></a></h3><ul><li>示例网络</li><li>将 <code>Board</code> 分解为三个 channel, 分别表示 黑子, 空位, 白子</li></ul><p>–</p><h3 id="performance" tabindex="-1"><a class="header-anchor" href="#performance"><span>Performance</span></a></h3><ul><li>并行对局, 独有 MCTS 实例, 共享 NNet 参数</li><li>训练网络时, 增大 Batch Size</li><li>Processes: 16; CPU: 2014 年的 E5, GPU: RTX 3090</li><li>平均 26 min / iter, 每个 iter 包括 128 局自我对弈 + 8 Epochs 训练 + 100 局与 <code>last_net</code> 对弈 + (如果网络更新) 100 局与 Random 对弈</li><li>GPU 利用率: ~10% --&gt; 100%</li></ul><hr><h2 id="训练结果" tabindex="-1"><a class="header-anchor" href="#训练结果"><span>训练结果</span></a></h2><hr><h2 id="可能的问题" tabindex="-1"><a class="header-anchor" href="#可能的问题"><span>可能的问题</span></a></h2><h3 id="loss-函数有误" tabindex="-1"><a class="header-anchor" href="#loss-函数有误"><span>Loss 函数有误</span></a></h3><ul><li>Loss 函数已和同学交流确认过, 应该没有问题</li><li>计算 Loss 函数时已使用 <code>assert</code> 判断形状无误</li><li>Loss 值与成功训练的同学的 Loss 值相近</li></ul><p>–</p><h3 id="nnet-实现有误" tabindex="-1"><a class="header-anchor" href="#nnet-实现有误"><span>NNet 实现有误</span></a></h3><ul><li>测试使用的是未经修改的示例网络, 已有同学使用相同网络训练成功</li><li>网络 Loss 正常下降</li></ul><p>–</p><h3 id="mcts-实现有误" tabindex="-1"><a class="header-anchor" href="#mcts-实现有误"><span>MCTS 实现有误</span></a></h3><ul><li>在小棋盘下, 随着同一 MCTS 实例对局次数的增加, 其理论实力会不断变强. 实际测试中, 使用随机的网络 + MCTS 与 Random 在 5x5 棋盘连续对局 100 局, 胜率总能超过 90%, 表明 MCTS 实现应该没有问题</li><li>对局过程中使用 <code>assert</code> 测试通过, 说明 MCTS 输出的 action 合法</li></ul><p>@slideend</p>`,27)])])}const d=s(l,[["render",t]]),k=JSON.parse('{"path":"/2023/course-work/exploration-and-practice-in-software-engineering-2/2023-06-27-alphazero.html","title":"AlphaZero 大作业展示","lang":"en-US","frontmatter":{"category":["Course Work"],"date":"2023-06-27T00:00:00.000Z","modified":"2025-09-20T15:15:02.000Z","tags":["Exploration_and_Practice_in_Software_Engineering_2"],"title":"AlphaZero 大作业展示","description":"@slidestart AlphaZero 大作业展示 实现思路 – MCTS – Neural Network 示例网络 将 Board 分解为三个 channel, 分别表示 黑子, 空位, 白子 – Performance 并行对局, 独有 MCTS 实例, 共享 NNet 参数 训练网络时, 增大 Batch Size Processes: 1...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AlphaZero 大作业展示\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-27T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://github.com/liblaf\\"}]}"],["meta",{"property":"og:url","content":"https://hope.liblaf.me/2023/course-work/exploration-and-practice-in-software-engineering-2/2023-06-27-alphazero.html"}],["meta",{"property":"og:site_name","content":"liblaf"}],["meta",{"property":"og:title","content":"AlphaZero 大作业展示"}],["meta",{"property":"og:description","content":"@slidestart AlphaZero 大作业展示 实现思路 – MCTS – Neural Network 示例网络 将 Board 分解为三个 channel, 分别表示 黑子, 空位, 白子 – Performance 并行对局, 独有 MCTS 实例, 共享 NNet 参数 训练网络时, 增大 Batch Size Processes: 1..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:tag","content":"Exploration_and_Practice_in_Software_Engineering_2"}],["meta",{"property":"article:published_time","content":"2023-06-27T00:00:00.000Z"}]]},"git":{},"readingTime":{"minutes":1.32,"words":396},"filePathRelative":"2023/course-work/exploration-and-practice-in-software-engineering-2/2023-06-27-alphazero.md","excerpt":"<p>@slidestart</p>\\n<h2>AlphaZero 大作业展示</h2>\\n<hr>\\n<h2>实现思路</h2>\\n<p>–</p>\\n<h3>MCTS</h3>\\n<div class=\\"language-python line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"python\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-python\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">def</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> get_action_probs</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\\">board</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\\"> player</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">):</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    if</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> training:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">        repeat search num_sim times</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    else</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">        return</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> policy predicted by NNet</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,k as data};
