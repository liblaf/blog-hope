import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as t,b as T,e as a,o}from"./app-BMihMyie.js";const r={},n={class:"MathJax",jax:"SVG",style:{position:"relative"}},s={style:{"vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.181ex",height:"2.005ex",role:"img",focusable:"false",viewBox:"0 -864 2290.1 886","aria-hidden":"true"},i={class:"MathJax",jax:"SVG",style:{position:"relative"}},d={style:{"vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.179ex",height:"1.595ex",role:"img",focusable:"false",viewBox:"0 -694 521 705","aria-hidden":"true"},m={class:"MathJax",jax:"SVG",style:{position:"relative"}},g={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.076ex",height:"1.756ex",role:"img",focusable:"false",viewBox:"0 -694 2243.4 776","aria-hidden":"true"},p={class:"MathJax",jax:"SVG",style:{position:"relative"}},c={style:{"vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.218ex",height:"1.355ex",role:"img",focusable:"false",viewBox:"0 -441 980.4 598.8","aria-hidden":"true"},h={class:"MathJax",jax:"SVG",style:{position:"relative"}},u={style:{"vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.179ex",height:"1.595ex",role:"img",focusable:"false",viewBox:"0 -694 521 705","aria-hidden":"true"},x={class:"MathJax",jax:"SVG",style:{position:"relative"}},f={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"15.149ex",height:"2.497ex",role:"img",focusable:"false",viewBox:"0 -853.7 6696 1103.7","aria-hidden":"true"},H={class:"MathJax",jax:"SVG",style:{position:"relative"}},w={style:{"vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.218ex",height:"1.355ex",role:"img",focusable:"false",viewBox:"0 -441 980.4 598.8","aria-hidden":"true"},M={class:"MathJax",jax:"SVG",style:{position:"relative"}},y={style:{"vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.218ex",height:"1.355ex",role:"img",focusable:"false",viewBox:"0 -441 980.4 598.8","aria-hidden":"true"};function v(L,Q){return o(),e("div",null,[Q[31]||(Q[31]=t("h3",{id:"摘要",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#摘要"},[t("span",null,"摘要")])],-1)),Q[32]||(Q[32]=t("p",null,"本报告旨在将组合数学课程中所学的核心概念 — 包括排列组合、递归关系、组合优化、鸽巢原理等 — 与 “光线追踪” (Ray Tracing) 相结合, 进行一次深入的交叉学科案例分析. 光线追踪, 作为一种模拟物理世界光照传播以生成逼真图像的算法, 其内在的计算过程、性能优化和理论框架, 无不与组合数学的原理息息相关. 本报告将逐一剖析这些联系, 展示组合数学作为一门基础学科, 如何为理解和解决计算机图形学中的前沿问题提供强有力的理论工具和思维框架.",-1)),Q[33]||(Q[33]=t("h3",{id:"_1-引言-光线追踪与组合爆炸的挑战",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_1-引言-光线追踪与组合爆炸的挑战"},[t("span",null,"1. 引言: 光线追踪与组合爆炸的挑战")])],-1)),Q[34]||(Q[34]=t("p",null,"首先, 让我们简要回顾一下光线追踪. 它的核心思想非常直观, 甚至可以说是一种 “暴力美学”: 为了确定屏幕上一个像素的颜色, 我们从虚拟摄像机 (眼睛) 出发, 穿过这个像素, 向场景中发射一束虚拟的光线. 这束光线会与场景中的某个物体相交. 根据交点的材质、光照情况, 我们计算出这个点的颜色. 如果该物体是反射或折射的 (如镜子、水面) , 光线会继续弹射, 递归地重复这个过程, 直到光线射出场景或达到预设的弹射次数. 最终, 所有这些信息被收集起来, 汇聚成该像素的最终颜色.",-1)),Q[35]||(Q[35]=t("p",null,[a("这个过程听起来简单, 但在实践中, 我们立刻会面临一个核心的挑战: "),t("strong",null,"组合爆炸 (Combinatorial Explosion)"),a(".")],-1)),t("ul",null,[t("li",null,[Q[2]||(Q[2]=t("strong",null,"路径的组合爆炸:",-1)),Q[3]||(Q[3]=a(" 想象一下, 一束光线在一个复杂的场景中弹射 10 次. 在每次弹射时, 它都可能射向半球空间内的无数个方向. 即使我们将其离散化, 比如每次弹射有 100 个可能的方向, 那么总的路径数量级也将是 ",-1)),t("mjx-container",n,[(o(),e("svg",s,[...Q[0]||(Q[0]=[T('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1533,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></g></g>',1)])])),Q[1]||(Q[1]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msup",null,[t("mn",null,"100"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mn",null,"10")])])])],-1))]),Q[4]||(Q[4]=a(", 一个天文数字. 渲染方程 (Rendering Equation) 本质上就是对所有可能的光线传播路径进行积分, 这是一个无穷维度的组合问题.",-1))]),Q[5]||(Q[5]=t("li",null,[t("strong",null,"计算量的组合爆炸:"),a(" 一个典型的场景可能包含数百万甚至数十亿个三角面片 (几何基元). 对于屏幕上每一个像素 (比如 4K 分辨率下有超过 800 万个像素), 发射出的每一条光线 (为了抗锯齿, 每个像素可能发射多条光线), 理论上都需要和场景中的每一个三角面片进行求交测试. 这导致了 "),t("code",null,"(像素数 x 每像素样本数 x 弹射次数) x 物体数量"),a(" 这样一个巨大的计算组合, 使得最朴素的光线追踪算法毫无实用性可言.")],-1))]),Q[36]||(Q[36]=T('<p>正因为光线追踪的本质是一个应对组合爆炸挑战的过程, 组合数学的原理才显得尤为重要. 它不仅帮助我们理解问题的规模, 更指导我们如何设计出高效的算法来 “修剪” 这个巨大的组合空间.</p><h3 id="_2-递归关系-光线追踪算法的数学本质" tabindex="-1"><a class="header-anchor" href="#_2-递归关系-光线追踪算法的数学本质"><span>2. 递归关系: 光线追踪算法的数学本质</span></a></h3><p>组合数学课程中一个重要的内容是 <strong>递归关系 (Recurrence Relations)</strong>. 一个序列的项可以通过其前一项或多项来定义, 这正是递归. 光线追踪的经典算法 — Whitted-style Ray Tracing, 其结构就是一种天然的递归关系.</p><p>我们可以将像素颜色的计算过程定义为一个函数 <code>Trace(ray)</code>, 其返回值是光线 <code>ray</code> 所能 “看到” 的颜色. 这个函数的行为可以被一个递归关系所描述:</p><p><code>Color(ray) =</code></p><ol><li>找到 <code>ray</code> 与场景的第一个交点 <code>P</code>.</li><li>如果未找到交点, 返回背景色 (<strong>递归基/Base Case</strong>).</li><li>如果交点 <code>P</code> 所在的物体是光源, 返回光源颜色 (<strong>递归基/Base Case</strong>).</li><li>否则, 在 <code>P</code> 点进行着色计算: <ul><li><code>LocalColor =</code> 计算 <code>P</code> 点的直接光照 (例如, 从 <code>P</code> 点向光源发射光线, 看是否被遮挡).</li><li><code>ReflectedColor = 0</code>, <code>RefractedColor = 0</code>.</li><li>如果 <code>P</code> 的材质是反射性的, 生成反射光线 <code>reflected_ray</code>, 则 <code>ReflectedColor = material.reflectivity * Trace(reflected_ray)</code>.</li><li>如果 <code>P</code> 的材质是折射性的, 生成折射光线 <code>refracted_ray</code>, 则 <code>RefractedColor = material.transparency * Trace(refracted_ray)</code>.</li></ul></li><li><code>return LocalColor + ReflectedColor + RefractedColor</code>.</li></ol><p>这里的 <code>Trace(ray)</code> 的定义中包含了对 <code>Trace(reflected_ray)</code> 和 <code>Trace(refracted_ray)</code> 的调用, 这是一个非常清晰的递归关系. 递归的深度由我们预设的最大弹射次数或者光线能量衰减阈值所限制, 这构成了递归的终止条件.</p><p>从组合数学的角度看, 解这个递归关系的过程, 就是在展开一棵 <strong>光路树 (Light Path Tree)</strong>. 树的根节点是主光线 (Primary Ray), 每个子节点是经过反射或折射产生的新光线. 这棵树的节点总数, 直接关系到单次像素着色的计算成本. 分析这棵树的结构、深度和分支因子, 对于评估和优化算法性能至关重要. 例如, 通过设置合理的递归深度, 我们实际上是在对这个无限的递归关系进行截断, 这是一种在精度和性能之间的权衡.</p><h3 id="_3-组合优化-加速结构-acceleration-structure-的构建" tabindex="-1"><a class="header-anchor" href="#_3-组合优化-加速结构-acceleration-structure-的构建"><span>3. 组合优化: 加速结构 (Acceleration Structure) 的构建</span></a></h3><p>如前所述, 对每条光线都测试场景中所有物体是不可行的. 如何快速找到光线与 “哪个” 物体相交? 这个问题本质上是一个 <strong>组合优化问题</strong>. 我们的目标是, 在所有可能的求交测试顺序和分组中, 找到一种能最小化平均求交次数的方案.</p><p>这催生了图形学中一个极其重要的研究领域: <strong>加速结构</strong>. 其中最经典和常用的是 <strong>层次包围盒 (Bounding Volume Hierarchy, BVH)</strong>.</p><ul><li><strong>问题定义:</strong> 给定一个包含 N 个物体的集合, 如何构建一棵二叉树, 使得树的叶子节点是单个物体, 每个中间节点是一个 “包围盒” (通常是轴对齐包围盒, AABB), 该包围盒紧紧包住其所有子节点的包围盒.</li><li><strong>组合本质:</strong> 构建一个 “最优” 的 BVH 树是一个 NP-Hard 问题. 因为对于 N 个物体, 可以构建的二叉树形态数量是 <strong>卡特兰数 (Catalan number)</strong>, 这是一个指数级增长的组合问题. 我们无法遍历所有可能的树结构来找到最优解.</li><li><strong>组合优化算法的应用:</strong> 因此, 在实践中, 我们使用启发式算法 (Heuristic Algorithms) 来近似求解这个组合优化问题. 最著名的启发式方法是 <strong>表面积启发式 (Surface Area Heuristic, SAH)</strong>. SAH 的核心思想是: 分割一个节点中的物体集合时, 我们尝试所有可能的分割方案 (例如, 按 X、Y、Z 轴的不同位置分割), 并为每种分割计算一个 “代价函数”. <ul><li><code>Cost(split) = C_traversal + P(hit_left) * Cost(left) + P(hit_right) * Cost(right)</code></li><li>其中, <code>C_traversal</code> 是遍历当前节点的固定开销. <code>P(hit_left)</code> 是光线与左子节点包围盒相交的概率, SAH 用包围盒的表面积来近似这个概率. <code>Cost(left)</code> 是左子树的物体数量.</li><li>我们选择使这个成本函数最小化的分割方案. 这是一种 <strong>贪心算法 (Greedy Algorithm)</strong>, 它在每一步都做出局部最优的选择, 以期达到全局近似最优. 这正是组合优化算法简介中所讨论的典型策略.</li></ul></li></ul><p>因此, 每次我们构建一个 BVH, 实际上都在求解一个复杂的组合优化问题. BVH 的效率直接决定了光线追踪的性能, 而其构建算法的优劣, 则取决于我们选择的组合优化策略.</p><h3 id="_4-鸽巢原理-空间划分与负载均衡" tabindex="-1"><a class="header-anchor" href="#_4-鸽巢原理-空间划分与负载均衡"><span>4. 鸽巢原理: 空间划分与负载均衡</span></a></h3><p><strong>鸽巢原理 (Pigeonhole Principle)</strong> 虽然简单, 却能提供对某些问题本质的深刻洞察. 在光线追踪中, 它能帮助我们理解另一类加速结构 — <strong>空间划分 (Spatial Subdivision)</strong>, 如均匀网格 (Uniform Grid) 或 K-D 树 (K-D Tree) 的性能特点和挑战.</p><ul><li><strong>模型:</strong> 我们将三维空间划分为一个个不重叠的单元格 (Voxel), 这就是 “<strong>鸽巢</strong>”. 场景中的三角面片等几何基元, 就是 “<strong>鸽子</strong>”. 我们将每个三角面片放入它所占据的所有单元格中.</li><li><strong>应用鸽巢原理</strong>: <ol><li><strong>必然的碰撞:</strong> 如果场景中的三角面片数量 (鸽子) 远大于我们划分的单元格数量 (鸽巢) , 那么根据鸽巢原理, 必然至少有一个单元格中包含了多个三角面片. 这解释了为什么在实现网格加速结构时, 每个单元格必须存储一个物体列表, 而不是单个物体指针.</li><li><strong>“茶壶在体育场” 问题:</strong> 这是一个经典的场景, 一个巨大的空间 (体育场) 中, 只包含一个精细但局部化的模型 (茶壶) . 如果我们使用均匀网格, 大量的单元格是空的, 而包含茶壶的少数几个单元格则 “挤满” 了成千上万个三角面片. 这就像把所有的鸽子都赶进了少数几个鸽巢里. 当光线穿过这些拥挤的单元格时, 其性能会急剧下降, 退化为无加速结构的情况. 鸽巢原理在这里揭示了<strong>负载不均衡</strong> 的根本问题, 并启发我们去寻求更自适应的划分策略, 如 K-D 树或八叉树, 它们会根据 “鸽子” 的分布来动态调整 “鸽巢” 的大小和位置.</li></ol></li></ul><h3 id="_5-容斥原理-构造实体几何-csg-的求交" tabindex="-1"><a class="header-anchor" href="#_5-容斥原理-构造实体几何-csg-的求交"><span>5. 容斥原理：构造实体几何 (CSG) 的求交</span></a></h3><p><strong>容斥原理 (Inclusion-Exclusion Principle)</strong> 在计算集合的并集大小时非常有用. 在图形学中, 这个原理在 <strong>构造实体几何 (Constructive Solid Geometry, CSG)</strong> 中有着直接的几何体现.</p><p>CSG 允许我们用简单的基本体 (球、立方体、圆柱等) 通过布尔运算 (并、交、差) 来构建复杂的模型. 例如, 一个带孔的螺母可以被描述为 “一个六棱柱” <strong>减去</strong> “一个圆柱”.</p><p>当一条光线与一个 CSG 物体求交时, 我们如何计算交点呢?</p><ul><li><strong>并集 (A ∪ B):</strong> 光线与 <code>A ∪ B</code> 的交集, 是光线与 <code>A</code> 的交集区间 和 光线与 <code>B</code> 的交集区间 的 <strong>并集</strong>.</li><li><strong>交集 (A ∩ B):</strong> 光线与 <code>A ∩ B</code> 的交集, 是光线与 <code>A</code> 的交集区间 和 光线与 <code>B</code> 的交集区间 的 <strong>交集</strong>.</li><li><strong>差集 (A - B):</strong> 这是容斥原理最直观的应用. 光线与 <code>A - B</code> 的交集, 是光线与 <code>A</code> 的交集区间 <strong>减去</strong> 光线与 <code>B</code> 的交集区间. 这个 “减去” 操作, 正是一种几何上的 “容斥”.</li></ul><p>具体来说, 当一条光线 <code>r(t) = o + t * d</code> 与物体 <code>A</code> 和 <code>B</code> 分别求交时, 我们会得到两组交点的参数 <code>t</code> 值区间列表, 例如 <code>Intervals(A)</code> 和 <code>Intervals(B)</code>. 要计算 <code>A - B</code> 的交点, 我们需要从 <code>Intervals(A)</code> 中, 挖掉 <code>Intervals(B)</code> 所覆盖的部分. 这个过程需要对区间端点进行排序和合并, 其逻辑与容斥原理计算集合元素个数的过程高度相似.</p><h3 id="_6-母函数与排列组合-路径积分的理论分析" tabindex="-1"><a class="header-anchor" href="#_6-母函数与排列组合-路径积分的理论分析"><span>6. 母函数与排列组合: 路径积分的理论分析</span></a></h3><p>这是更理论化的一层联系. 现代的真实感渲染主要基于 <strong>路径追踪 (Path Tracing)</strong>, 它是光线追踪的一种蒙特卡洛 (Monte Carlo) 变体. 路径追踪的核心是估算渲染方程这个无穷级数 (所有光路贡献的总和).</p><p>我们可以从一个组合计数的角度来理解它:</p>',25)),t("ul",null,[t("li",null,[Q[10]||(Q[10]=t("strong",null,"路径计数:",-1)),Q[11]||(Q[11]=a(" 假设光线每次弹射后, 会根据 BRDF (双向反射分布函数) 随机选择一个新方向. 我们可以问: 长度为 ",-1)),t("mjx-container",i,[(o(),e("svg",d,[...Q[6]||(Q[6]=[t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D458",d:"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"})])])],-1)])])),Q[7]||(Q[7]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"k")])],-1))]),Q[12]||(Q[12]=a(" (弹射 ",-1)),t("mjx-container",m,[(o(),e("svg",g,[...Q[8]||(Q[8]=[T('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(743.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1743.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g>',1)])])),Q[9]||(Q[9]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"k"),t("mo",null,"−"),t("mn",null,"1")])],-1))]),Q[13]||(Q[13]=a(" 次) 的光路有多少种 “有意义” 的贡献方式?",-1))]),t("li",null,[Q[24]||(Q[24]=t("strong",null,"母函数 (Generating Functions) 的应用:",-1)),Q[25]||(Q[25]=a(" 我们可以构想一个理论模型. 令 ",-1)),t("mjx-container",p,[(o(),e("svg",c,[...Q[14]||(Q[14]=[T('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g>',1)])])),Q[15]||(Q[15]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msub",null,[t("mi",null,"a"),t("mi",null,"k")])])],-1))]),Q[26]||(Q[26]=a(" 代表所有长度为 ",-1)),t("mjx-container",h,[(o(),e("svg",u,[...Q[16]||(Q[16]=[t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D458",d:"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"})])])],-1)])])),Q[17]||(Q[17]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"k")])],-1))]),Q[27]||(Q[27]=a(" 的光路对最终图像的平均贡献权重. 我们可以定义一个母函数 ",-1)),t("mjx-container",x,[(o(),e("svg",f,[...Q[18]||(Q[18]=[T('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(786,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1175,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1747,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2413.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3469.6,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="msub" transform="translate(4692.2,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="msup" transform="translate(5672.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g>',1)])])),Q[19]||(Q[19]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"G"),t("mo",{stretchy:"false"},"("),t("mi",null,"x"),t("mo",{stretchy:"false"},")"),t("mo",null,"="),t("mo",{"data-mjx-texclass":"OP"},"∑"),t("msub",null,[t("mi",null,"a"),t("mi",null,"k")]),t("msup",null,[t("mi",null,"x"),t("mi",null,"k")])])],-1))]),Q[28]||(Q[28]=a(". 这个函数的性质 (如收敛半径、系数的增长率) 可以告诉我们关于渲染算法收敛性的信息. 例如, 如果 ",-1)),t("mjx-container",H,[(o(),e("svg",w,[...Q[20]||(Q[20]=[T('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g>',1)])])),Q[21]||(Q[21]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msub",null,[t("mi",null,"a"),t("mi",null,"k")])])],-1))]),Q[29]||(Q[29]=a(" 衰减得很快, 说明长路径的贡献很小, 我们的路径追踪算法可以设置一个较小的弹射深度, 收敛会很快. 反之, 如果 ",-1)),t("mjx-container",M,[(o(),e("svg",y,[...Q[22]||(Q[22]=[T('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g>',1)])])),Q[23]||(Q[23]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msub",null,[t("mi",null,"a"),t("mi",null,"k")])])],-1))]),Q[30]||(Q[30]=a(" 衰减缓慢 (例如在充满了镜面和玻璃的场景中) , 则表明我们需要追踪更长的路径, 算法收敛会更慢.",-1))])]),Q[37]||(Q[37]=T('<p>虽然在实际编码中我们不会直接去构造这个母函数, 但这种思维方式, 即 <strong>用一个形式幂级数的系数来编码一个组合序列的属性</strong>, 为我们从理论上分析蒙特卡洛光线追踪的效率、偏差 (bias) 和方差 (variance) 提供了强大的数学框架. 它将复杂的路径采样问题, 转化为了分析一个函数的解析性质.</p><h3 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h3><p>通过本次研究案例的撰写, 我深刻体会到, 组合数学远非一门仅仅关于计数和棋盘问题的抽象学科. 它所提供的系统性思维工具, 对于理解和解决计算机图形学, 尤其是光线追踪领域的根本性挑战, 具有不可替代的价值.</p><ul><li><strong>递归关系</strong> 揭示了经典光线追踪算法的内在结构.</li><li><strong>组合优化</strong> 是构建高效 BVH 加速结构的核心, 直接决定了现代光线追踪的性能.</li><li><strong>鸽巢原理</strong> 帮助我们洞察空间划分算法的负载均衡问题.</li><li><strong>容斥原理</strong> 为 CSG 建模提供了坚实的几何运算基础.</li><li><strong>排列组合与母函数</strong> 则为分析更高级的路径追踪算法的收敛性和效率提供了理论武器.</li></ul><p>这门课程让我重新审视了图形学中的许多 “想当然” 的算法和数据结构. 我不再仅仅视它们为 “聪明的技巧”, 而是能够从更底层的组合结构和优化目标去理解其设计的必然性和精妙之处. 未来, 在研究新的渲染技术, 例如多重重要性采样、自适应采样策略或基于机器学习的降噪时, 我相信组合数学的视角 — 如何选择最优的样本组合、如何设计高效的搜索策略、如何分析复杂过程的收敛性 — 将继续为我们提供源源不断的灵感和深刻的洞察力.</p>',5))])}const B=l(r,[["render",v]]),Z=JSON.parse('{"path":"/PhD/course/2024-2025_Spring_Term/74100043-Combinatorial_Mathematics/2025-02-18-01-%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%E6%A1%88%E4%BE%8B.html","title":"组合数学案例","lang":"en-US","frontmatter":{"date":"2025-02-18T01:27:00.000Z","modified":"2025-09-20T15:07:37.000Z","tags":["PhD/Course/Combinatorial_Mathematics"],"title":"组合数学案例","description":"摘要 本报告旨在将组合数学课程中所学的核心概念 — 包括排列组合、递归关系、组合优化、鸽巢原理等 — 与 “光线追踪” (Ray Tracing) 相结合, 进行一次深入的交叉学科案例分析. 光线追踪, 作为一种模拟物理世界光照传播以生成逼真图像的算法, 其内在的计算过程、性能优化和理论框架, 无不与组合数学的原理息息相关. 本报告将逐一剖析这些联系,...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组合数学案例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-18T01:27:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://github.com/liblaf\\"}]}"],["meta",{"property":"og:url","content":"https://hope.liblaf.me/PhD/course/2024-2025_Spring_Term/74100043-Combinatorial_Mathematics/2025-02-18-01-%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%E6%A1%88%E4%BE%8B.html"}],["meta",{"property":"og:site_name","content":"liblaf"}],["meta",{"property":"og:title","content":"组合数学案例"}],["meta",{"property":"og:description","content":"摘要 本报告旨在将组合数学课程中所学的核心概念 — 包括排列组合、递归关系、组合优化、鸽巢原理等 — 与 “光线追踪” (Ray Tracing) 相结合, 进行一次深入的交叉学科案例分析. 光线追踪, 作为一种模拟物理世界光照传播以生成逼真图像的算法, 其内在的计算过程、性能优化和理论框架, 无不与组合数学的原理息息相关. 本报告将逐一剖析这些联系,..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:tag","content":"PhD/Course/Combinatorial_Mathematics"}],["meta",{"property":"article:published_time","content":"2025-02-18T01:27:00.000Z"}]]},"git":{},"readingTime":{"minutes":12.94,"words":3881},"filePathRelative":"PhD/course/2024-2025_Spring_Term/74100043-Combinatorial_Mathematics/2025-02-18-01-组合数学案例.md","excerpt":"<h3>摘要</h3>\\n<p>本报告旨在将组合数学课程中所学的核心概念 — 包括排列组合、递归关系、组合优化、鸽巢原理等 — 与 “光线追踪” (Ray Tracing) 相结合, 进行一次深入的交叉学科案例分析. 光线追踪, 作为一种模拟物理世界光照传播以生成逼真图像的算法, 其内在的计算过程、性能优化和理论框架, 无不与组合数学的原理息息相关. 本报告将逐一剖析这些联系, 展示组合数学作为一门基础学科, 如何为理解和解决计算机图形学中的前沿问题提供强有力的理论工具和思维框架.</p>\\n<h3>1. 引言: 光线追踪与组合爆炸的挑战</h3>\\n<p>首先, 让我们简要回顾一下光线追踪. 它的核心思想非常直观, 甚至可以说是一种 “暴力美学”: 为了确定屏幕上一个像素的颜色, 我们从虚拟摄像机 (眼睛) 出发, 穿过这个像素, 向场景中发射一束虚拟的光线. 这束光线会与场景中的某个物体相交. 根据交点的材质、光照情况, 我们计算出这个点的颜色. 如果该物体是反射或折射的 (如镜子、水面) , 光线会继续弹射, 递归地重复这个过程, 直到光线射出场景或达到预设的弹射次数. 最终, 所有这些信息被收集起来, 汇聚成该像素的最终颜色.</p>","autoDesc":true}');export{B as comp,Z as data};
