import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as i,o as l}from"./app-BMihMyie.js";const d={};function t(n,o){return l(),c("div",null,[...o[0]||(o[0]=[i('<h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><p>请编写带有图形界面的普通三阶魔方模拟程序.</p><p>要求:</p><ul><li>实现平移、放大、缩小和自适应大小的魔方展示功能.</li><li>请自定义编码表示魔方的各种可能操作, 每种编码表示其中 1 种操作.</li><li>实现打开文本文件的功能, 该文本文件由一系列编码组成, 对应魔方操作.</li><li>实现魔方操作功能: 可以交互实现每个操作, 也可以通过动画自动播放魔方的系列操作.</li><li>在操作或转动魔方时, 必须以动画的形式展示, 从而方便看清如何操作或转动.</li><li>可以保存魔方操作, 保存结果是由一系列编码组成文本文件.</li><li>编写文档详细介绍模拟算法与图形界面等内容.</li></ul><p>参考:</p><ul><li>雍俊海. 清华教授的小课堂魔方真好玩. 北京: 清华大学出版社.</li></ul><h3 id="_1-项目概述" tabindex="-1"><a class="header-anchor" href="#_1-项目概述"><span>1. 项目概述</span></a></h3><p>本项目旨在开发一个带有图形界面的普通三阶魔方模拟程序. 程序需要能够展示魔方, 并允许用户通过交互或预设指令序列对魔方进行操作. 所有操作都应以动画形式展现, 以提供清晰的可视化反馈. 此外, 程序还需支持操作序列的加载和保存功能.</p><h3 id="_2-当前已实现功能" tabindex="-1"><a class="header-anchor" href="#_2-当前已实现功能"><span>2. 当前已实现功能</span></a></h3><p>根据提供的代码库, 目前项目已取得以下进展：</p><ol><li><strong>魔方模型的加载与基础显示 (基本完成)</strong><ul><li><strong>模型加载:</strong> 通过 <code>tinyobjloader</code> 库在 <code>src/assets.cc</code> (<code>load_cube</code> 函数) 中加载了 <code>assets/cube.obj</code> 魔方模型及其材质文件 (<code>assets/cube.mtl</code>).</li><li><strong>图形界面与可视化:</strong> 使用 <code>Polyscope</code> 库进行图形显示. <code>src/main.cc</code> 初始化 <code>Polyscope</code>, 并调用 <code>src/setup.cc</code> 中的函数进行场景设置.</li><li><strong>魔方单元 (Cubie）的表示:</strong><ul><li><code>src/cubie.h</code> 和 <code>src/cubie.cc</code> 定义了 <code>Cubie</code> 类, 每个 <code>Cubie</code> 代表魔方的一个小块, 并记录其初始位置 (<code>_location_initial</code>) 和当前逻辑位置 (<code>_location</code>).</li><li><code>Cubie</code> 类通过 <code>Polyscope</code> 的 <code>Group</code> 和 <code>SurfaceMesh</code> 进行管理和变换. <code>group_name</code> 函数 (<code>src/utils.cc</code>) 用于生成每个 <code>Cubie</code> 在 <code>Polyscope</code> 中的唯一名称.</li></ul></li><li><strong>魔方整体 (Cube）的表示:</strong><ul><li><code>src/cube.h</code> 和 <code>src/cube.cc</code> 定义了 <code>Cube</code> 类, 它管理着所有 <code>Cubie</code> 对象 (27 个）.</li><li><code>Cube</code> 类负责处理魔方整体的动画状态 (<code>_animating</code>, <code>_animation_start</code>, <code>_duration</code>) 和当前执行的动作 (<code>_action</code>).</li></ul></li></ul></li><li><strong>魔方操作的自定义编码 (已实现)</strong><ul><li><code>src/action.h</code> 和 <code>src/action.cc</code> 定义了 <code>Action</code> 类.</li><li>该类通过枚举 <code>Side</code> (FRONT, BACK, UP, DOWN, LEFT, RIGHT) 和布尔值 <code>_clockwise</code> 来编码魔方的基本操作. 例如, <code>Action (Action::FRONT, true)</code> 表示顺时针转动前面.</li><li><code>Action</code> 类还包含了计算旋转轴 (<code>rotate_axis ()</code>)、旋转角度 (<code>rotate_angle ()</code>) 以及根据动作更新 <code>Cubie</code> 逻辑位置 (<code>Action::rotate (const glm::ivec3 location)</code>) 和物理变换矩阵 (<code>Action::rotate (const glm::mat4x4 transform, const float progress)</code>) 的方法.</li></ul></li><li><strong>交互式魔方操作与动画展示 (已实现)</strong><ul><li><strong>交互输入:</strong> <code>src/main.cc</code> 中的 <code>callback</code> 函数使用 <code>ImGui</code> 监听键盘输入 (F, B, U, D, L, R 键, 配合 Shift 键判断顺/逆时针).</li><li><strong>触发操作:</strong> 按下相应按键后, 会创建一个 <code>Action</code> 对象, 并调用 <code>Cube::start(action)</code> 方法来启动一个魔方操作.</li><li><strong>动画实现:</strong><ul><li><code>Cube::start()</code> 方法会标记哪些 <code>Cubie</code> 参与当前动画 (<code>animating_cubies()</code>), 并记录动画开始时间.</li><li><code>Cube::update()</code> 方法在 <code>Polyscope</code> 的每帧回调中被调用, 计算动画进度 (<code>progress</code>).</li><li><code>Cubie::update(action, progress)</code> 方法根据进度更新参与动画的 <code>Cubie</code> 的 <code>Polyscope</code> 网格变换 (<code>mesh-&gt;setTransform()</code>), 从而实现平滑的旋转动画.</li><li>动画结束时, <code>Cube::end()</code> 方法会调用 <code>Cubie::end(action)</code> 来更新受影响 <code>Cubie</code> 的逻辑位置 (<code>_location</code>).</li></ul></li><li><strong>动画时长:</strong> 动画的持续时间由 <code>Cube::_duration</code> 控制.</li></ul></li><li><strong>基础视图控制 (部分依赖 Polyscope)</strong><ul><li><code>Polyscope</code> 本身提供了平移、缩放 (通过鼠标滚轮）、旋转 (通过鼠标拖拽）等视图控制功能.</li><li><code>src/setup.cc</code> 中的 <code>setup_ground()</code> 函数根据魔方模型的包围盒 (bounding box）自适应地设置了地面高度, 间接实现了部分自适应大小的展示效果.</li></ul></li></ol><h3 id="_3-核心技术栈" tabindex="-1"><a class="header-anchor" href="#_3-核心技术栈"><span>3. 核心技术栈</span></a></h3><ul><li><strong>C++20:</strong> 主要编程语言.</li><li><strong>Polyscope:</strong> 用于 3D 可视化和 GUI 框架.</li><li><strong>glm:</strong> 用于处理向量和矩阵等图形学数学运算.</li><li><strong>Eigen:</strong> 用于更复杂的线性代数运算 (在 <code>setup.cc</code> 中加载顶点和颜色时使用).</li><li><strong>tinyobjloader:</strong> 用于加载 <code>.obj</code> 格式的 3D 模型.</li><li><strong>spdlog:</strong> 用于日志记录.</li><li><strong>fmt:</strong> 用于字符串格式化.</li><li><strong>ImGui:</strong> (通过 Polyscope) 用于处理键盘输入以触发魔方操作.</li><li><strong>xmake:</strong> 作为项目构建系统.</li></ul><h3 id="_4-代码结构简介" tabindex="-1"><a class="header-anchor" href="#_4-代码结构简介"><span>4. 代码结构简介</span></a></h3><ul><li><strong><code>src/main.cc</code>:</strong> 程序入口, 初始化 <code>Polyscope</code>, 加载资源, 设置回调函数, 处理用户输入.</li><li><strong><code>src/action.h/.cc</code>:</strong> 定义魔方操作的编码方式及其相关的旋转逻辑.</li><li><strong><code>src/cubie.h/.cc</code>:</strong> 定义魔方小块 (Cubie) 的行为和状态, 包括其在 <code>Polyscope</code> 中的表示和变换.</li><li><strong><code>src/cube.h/.cc</code>:</strong> 定义魔方整体, 管理所有 <code>Cubie</code>, 并控制动画的生命周期和状态更新.</li><li><strong><code>src/assets.h/.cc</code>:</strong> 负责加载外部资源, 如 <code>.obj</code> 模型.</li><li><strong><code>src/setup.h/.cc</code>:</strong> 负责将加载的资源注册到 <code>Polyscope</code> 中, 创建 <code>Cubie</code> 的分组, 并进行场景的初始设置.</li><li><strong><code>src/utils.h/.cc</code>:</strong> 包含一些辅助函数, 如生成 <code>Cubie</code> 的唯一名称.</li></ul><h3 id="_5-尚待实现的功能-根据大作业要求" tabindex="-1"><a class="header-anchor" href="#_5-尚待实现的功能-根据大作业要求"><span>5. 尚待实现的功能 (根据大作业要求)</span></a></h3><ol><li><strong>完整的自适应大小功能:</strong> 虽然 <code>Polyscope</code> 提供了视图控制, 但可能需要更明确的&quot;自适应大小到窗口&quot;或&quot;重置视图到最佳观察点&quot;的功能.</li><li><strong>打开文本文件加载操作序列:</strong> 目前没有实现读取包含操作编码的文本文件的功能.</li><li><strong>自动播放魔方系列操作:</strong> 基于上一条, 需要实现解析文件中的操作编码, 并按顺序自动播放动画.</li><li><strong>保存魔方操作序列:</strong> 目前没有实现将用户进行的操作 (<code>Action</code> 序列）保存到文本文件的功能.</li><li><strong>详细文档:</strong> 需要撰写包含模拟算法、图形界面设计、自定义编码说明等内容的详细文档.</li></ol><h3 id="_6-后续工作计划" tabindex="-1"><a class="header-anchor" href="#_6-后续工作计划"><span>6. 后续工作计划</span></a></h3><ol><li><strong>文件操作模块:</strong><ul><li>设计操作编码在文本文件中的表示格式 (例如, 每行一个操作, 如 <code>F</code> 代表前面顺时针, <code>U&#39;</code> 代表上面逆时针).</li><li>实现文件读取功能, 解析操作序列.</li><li>实现文件写入功能, 保存当前操作历史或特定序列.</li></ul></li><li><strong>自动播放控制模块:</strong><ul><li>在 <code>Cube</code> 类或一个新的管理类中添加队列来存储从文件加载或手动输入的操作序列.</li><li>修改 <code>Cube::update()</code> 或主回调逻辑, 使其在当前动画结束后, 能自动从队列中取出下一个操作并执行 <code>Cube::start()</code>.</li><li>可能需要在 <code>ImGui</code> 界面添加播放、暂停、停止等控制按钮.</li></ul></li><li><strong>UI 增强:</strong><ul><li>考虑在 <code>ImGui</code> 界面中添加按钮来触发旋转, 作为键盘操作的补充.</li><li>添加文件打开和保存的对话框或按钮.</li><li>添加用于控制自动播放的 UI 元素.</li></ul></li><li><strong>文档撰写:</strong><ul><li>开始撰写项目文档, 详细描述算法设计 (特别是动画插值、状态更新逻辑)、<code>Action</code> 编码方案、<code>Polyscope</code> 的使用、<code>ImGui</code> 交互设计等.</li><li>记录开发过程中遇到的问题和解决方案.</li></ul></li></ol><h3 id="_7-总结" tabindex="-1"><a class="header-anchor" href="#_7-总结"><span>7. 总结</span></a></h3><p>项目已成功搭建了三阶魔方模拟的基础框架, 包括模型加载、基于 <code>Polyscope</code> 的可视化、自定义操作编码以及交互式的单步操作动画. 核心的旋转逻辑和动画更新机制已经实现. 接下来的主要工作将集中在文件 I/O、操作序列的自动播放以及完善用户界面和项目文档. 目前进展顺利, 预计能够按时完成大作业要求.</p>',21)])])}const a=e(d,[["render",t]]),u=JSON.parse('{"path":"/PhD/course/2024-2025_Spring_Term/84100253-Computer_Aided_Geometry_Modeling/2025-05-09-11-%E7%AC%AC11%E6%AC%A1%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%BF%9B%E5%B1%95%E6%8A%A5%E5%91%8A.html","title":"第 11 次大作业进展报告","lang":"en-US","frontmatter":{"date":"2025-05-09T08:05:00.000Z","modified":"2025-05-14T14:59:59.000Z","tags":["PhD/Course/Computer_Aided_Geometry_Modeling"],"title":"第 11 次大作业进展报告","description":"问题 请编写带有图形界面的普通三阶魔方模拟程序. 要求: 实现平移、放大、缩小和自适应大小的魔方展示功能. 请自定义编码表示魔方的各种可能操作, 每种编码表示其中 1 种操作. 实现打开文本文件的功能, 该文本文件由一系列编码组成, 对应魔方操作. 实现魔方操作功能: 可以交互实现每个操作, 也可以通过动画自动播放魔方的系列操作. 在操作或转动魔方时,...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第 11 次大作业进展报告\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-09T08:05:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://github.com/liblaf\\"}]}"],["meta",{"property":"og:url","content":"https://hope.liblaf.me/PhD/course/2024-2025_Spring_Term/84100253-Computer_Aided_Geometry_Modeling/2025-05-09-11-%E7%AC%AC11%E6%AC%A1%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%BF%9B%E5%B1%95%E6%8A%A5%E5%91%8A.html"}],["meta",{"property":"og:site_name","content":"liblaf"}],["meta",{"property":"og:title","content":"第 11 次大作业进展报告"}],["meta",{"property":"og:description","content":"问题 请编写带有图形界面的普通三阶魔方模拟程序. 要求: 实现平移、放大、缩小和自适应大小的魔方展示功能. 请自定义编码表示魔方的各种可能操作, 每种编码表示其中 1 种操作. 实现打开文本文件的功能, 该文本文件由一系列编码组成, 对应魔方操作. 实现魔方操作功能: 可以交互实现每个操作, 也可以通过动画自动播放魔方的系列操作. 在操作或转动魔方时,..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:tag","content":"PhD/Course/Computer_Aided_Geometry_Modeling"}],["meta",{"property":"article:published_time","content":"2025-05-09T08:05:00.000Z"}]]},"git":{},"readingTime":{"minutes":6.94,"words":2081},"filePathRelative":"PhD/course/2024-2025_Spring_Term/84100253-Computer_Aided_Geometry_Modeling/2025-05-09-11-第11次大作业进展报告.md","excerpt":"<h2>问题</h2>\\n<p>请编写带有图形界面的普通三阶魔方模拟程序.</p>\\n<p>要求:</p>\\n<ul>\\n<li>实现平移、放大、缩小和自适应大小的魔方展示功能.</li>\\n<li>请自定义编码表示魔方的各种可能操作, 每种编码表示其中 1 种操作.</li>\\n<li>实现打开文本文件的功能, 该文本文件由一系列编码组成, 对应魔方操作.</li>\\n<li>实现魔方操作功能: 可以交互实现每个操作, 也可以通过动画自动播放魔方的系列操作.</li>\\n<li>在操作或转动魔方时, 必须以动画的形式展示, 从而方便看清如何操作或转动.</li>\\n<li>可以保存魔方操作, 保存结果是由一系列编码组成文本文件.</li>\\n<li>编写文档详细介绍模拟算法与图形界面等内容.</li>\\n</ul>","autoDesc":true}');export{a as comp,u as data};
