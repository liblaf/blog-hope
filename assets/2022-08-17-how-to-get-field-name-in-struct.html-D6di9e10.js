import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as s,o as t}from"./app-BMihMyie.js";const n={};function o(l,e){return t(),a("div",null,[...e[0]||(e[0]=[s(`<h2 id="what-is-debug-info" tabindex="-1"><a class="header-anchor" href="#what-is-debug-info"><span>What is Debug Info</span></a></h2><p>Read <a href="https://llvm.org/docs/SourceLevelDebugging.html" target="_blank" rel="noopener noreferrer">Source Level Debugging with LLVM</a> for more details. If you do not have enough time, a few examples from the documentation should be enough.</p><h2 id="how-to-generate-debug-info" tabindex="-1"><a class="header-anchor" href="#how-to-generate-debug-info"><span>How to Generate Debug Info</span></a></h2><p>Pass <code>-g</code> or <code>--debug</code> option to <code>clang</code>.</p><h2 id="how-to-access-debug-info" tabindex="-1"><a class="header-anchor" href="#how-to-access-debug-info"><span>How to Access Debug Info</span></a></h2><blockquote><p>LLVM uses several intrinsic functions (name prefixed with <code>llvm.dbg</code>) to track source local variables through optimization and code generation.<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p></blockquote><p>Debug Info is arranged like a directed graph. However, LLVM does not provide a convenient way to traverse all <code>llvm::DINode</code>s. Therefore, we need an entry into debug info. Here we mainly focus on <code>llvm.dbg.declare</code> intrinsic, aka <code>llvm::DbgDeclareInst</code>, as the entry.</p><blockquote><h6 id="llvm-dbg-addr" tabindex="-1"><a class="header-anchor" href="#llvm-dbg-addr"><span><code>llvm.dbg.addr</code><sup class="footnote-ref"><a href="#footnote1">[1:1]</a><a class="footnote-anchor" id="footnote-ref1:1"></a></sup></span></a></h6><p>This intrinsic provides information about a local element (e.g., variable). The first argument is <code>metadata</code> holding the address of variable, typically a static <code>alloca</code> in the function entry block. The second argument is a <a href="https://llvm.org/docs/LangRef.html#dilocalvariable" target="_blank" rel="noopener noreferrer">local variable</a> containing a description of the variable. The third argument is a <a href="https://llvm.org/docs/LangRef.html#diexpression" target="_blank" rel="noopener noreferrer">complex expression</a>. An <code>llvm.dbg.addr</code> intrinsic describes the <em>address</em> of a source variable.</p><h6 id="llvm-dbg-declare" tabindex="-1"><a class="header-anchor" href="#llvm-dbg-declare"><span><code>llvm.dbg.declare</code><sup class="footnote-ref"><a href="#footnote1">[1:2]</a><a class="footnote-anchor" id="footnote-ref1:2"></a></sup></span></a></h6><p>This intrinsic is identical to <code>llvm.dbg.addr</code>, except that there can only be one call to <code>llvm.dbg.declare</code> for a given concrete <a href="https://llvm.org/docs/LangRef.html#dilocalvariable" target="_blank" rel="noopener noreferrer">local variable</a>.</p></blockquote><p><code>dbg_declare_inst-&gt;getAddress()</code> gives the address (a <code>llvm::Value*</code>) of the variable. <code>dbg_declare_inst-&gt;getVariable()</code> returns a <code>llvm::DILocalVariable*</code>. The name of the variable can be obtained through <code>debug_info_local_variable-&gt;getName()</code>. The type of the variable can be found in <code>debug_info_local_variable-&gt;getType()</code>, which returns a <code>llvm::DIType*</code>.</p><h2 id="type-system-in-debug-info" tabindex="-1"><a class="header-anchor" href="#type-system-in-debug-info"><span>Type System in Debug Info</span></a></h2><p>Besides <code>llvm::Type</code>, LLVM provides a similar type system with more details in debug info. <code>llvm::StructType</code> does not contain information about field names. However, debug info contains information about variable name, typedef, field names and more.</p><p><img src="https://llvm.org/doxygen/classllvm_1_1DIType__inherit__graph.png" alt="Inheritance diagram for " loading="lazy"></p><p><code>llvm::DIType</code> is arranged like a directed graph. You can use <code>getBaseType()</code> or <code>getElements()</code> to dive into the graph. <code>getTag()</code> method can be used to quickly determine the type of the <code>llvm::DIType</code>. For example, <code>getTag()</code> may return <code>llvm::dwarf::DW_TAG_pointer_type</code>, <code>llvm::dwarf::DW_TAG_structure_type</code>, etc. Most of the tags can be found in<br> file <code>llvm/BinaryFormat/Dwarf.def</code>.</p><h3 id="null" tabindex="-1"><a class="header-anchor" href="#null"><span>null</span></a></h3><p>Nothing to say. Be careful with <code>nullptr</code>!</p><h3 id="pointer-type" tabindex="-1"><a class="header-anchor" href="#pointer-type"><span>pointer type</span></a></h3><p>pointer types are <code>llvm::DIDerivedType</code>. <code>getBaseType()</code> returns its pointee type. For example, if <code>derived_type</code> represents <code>int*</code>, then <code>derived_type-&gt;getBaseType()</code> should be <code>int</code>. Under most circumstances, it will return a <code>llvm::DIType*</code>.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p><code>getBaseType()</code> can return <code>nullptr</code>!</p></div><h3 id="member-type" tabindex="-1"><a class="header-anchor" href="#member-type"><span>member type</span></a></h3><p>member types are <code>llvm::DIDerivedType</code> with tag <code>llvm::dwarf::DW_TAG_member</code>. Usually they are elements of a struct or a class. The field name can be obtained through <code>getName()</code> method.</p><h3 id="structure-type" tabindex="-1"><a class="header-anchor" href="#structure-type"><span>structure type</span></a></h3><p>structure types are <code>llvm::DICompositeType</code> with tag <code>llvm::dwarf::DW_TAG_structure_type</code>. <code>getName()</code> returns its name.</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>The return value of <code>getName()</code> may defer from that of <code>llvm::StructType::getStructName()</code>. If you declare multiple structures with the same name but in different scopes (for example, two different structures named <code>A</code> in function <code>f</code> and <code>g</code>), <code>llvm::StructType::getStructName()</code> would produce something like <code>%struct.A</code> and <code>%struct.A.0</code> respectively, while <code>llvm::DICompositeType::getName()</code> will always give a <code>A</code>.</p></div><p><code>getElements()</code> returns all its fields. Under most circumstances, a field should be a <code>llvm::DIDerivedType</code> with tag <code>llvm::dwarf::DW_TAG_member</code>.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>The tag of an element can be something else from <code>llvm::dwarf::DW_TAG_member</code>! Especially in <code>c++</code>.</p></div><h3 id="typedef" tabindex="-1"><a class="header-anchor" href="#typedef"><span>typedef</span></a></h3><p><code>llvm::DIDerivedType</code> with tag <code>llvm::dwarf::DW_TAG_typedef</code>. <code>getBaseType()</code> returns the type of the alias.</p><h2 id="how-to-obtain-field-name-in-struct" tabindex="-1"><a class="header-anchor" href="#how-to-obtain-field-name-in-struct"><span>How to Obtain Field Name in <code>struct</code></span></a></h2><div class="hint-container note"><p class="hint-container-title">Note</p><p><code>struct</code> Elements in <code>StructType</code> may defer from those in <code>DICompositeType</code> because of alignment. Compiler may add additional elements to <code>StructType</code> for alignment, but not for <code>DICompositeType</code>. Therefore, the better way to find corresponding elements in <code>StructType</code> and <code>DICompositeType</code> is by offset.</p></div><p>The key point is to maintain mapping between <code>llvm::Type</code> and <code>llvm::DIType</code>, <code>llvm::Value</code> and <code>llvm::DINode</code>.</p><p>See <a href="https://github.com/liblaf/lib-monitor/tree/main/inserter/field_name_extractor" target="_blank" rel="noopener noreferrer">lib-monitor/inserter/field_name_extractor at main Â· liblaf/lib-monitor</a> for implementation details.</p><h2 id="strange-things-about-getelementptr" tabindex="-1"><a class="header-anchor" href="#strange-things-about-getelementptr"><span>Strange Things about <code>getelementptr</code></span></a></h2><h3 id="invalid-element-idx" tabindex="-1"><a class="header-anchor" href="#invalid-element-idx"><span>Invalid element idx!</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> __attribute__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">packed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> v; } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">q </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> v;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">__asm__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">ldr  %0, %1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">=r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(v) : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">q));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-llvm line-numbers-mode" data-highlighter="shiki" data-ext="llvm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-llvm"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">%struct.anon.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">i32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">%89</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">load</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> %struct.anon.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">*, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">%struct.anon.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">** </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">%13</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">align</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">!dbg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> !</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3598</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">%90</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">getelementptr</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> inbounds</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> %struct.anon.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">%struct.anon.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">* </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">%89</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">i32</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">!dbg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> !</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3598</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">%91</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">call</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> i64</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> asm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;ldr   \${0:Q}, $1  \\0A\\09ldr   \${0:R}, $2  \\0A\\09&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;=&amp;r,*m,*m&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">%struct.anon.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">* </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">%88</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">%struct.anon.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">* </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">%90</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) #</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">!dbg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> !</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3599</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">!srcloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> !</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3600</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Pay attention to the <code>GetElementPtrInst</code>!</p></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p><a href="https://llvm.org/docs/SourceLevelDebugging.html" target="_blank" rel="noopener noreferrer">https://llvm.org/docs/SourceLevelDebugging.html</a> <a href="#footnote-ref1" class="footnote-backref">â©ï¸</a> <a href="#footnote-ref1:1" class="footnote-backref">â©ï¸</a> <a href="#footnote-ref1:2" class="footnote-backref">â©ï¸</a></p></li></ol></section>`,39)])])}const h=i(n,[["render",o]]),p=JSON.parse('{"path":"/2022/research/idea/2022-08-17-how-to-get-field-name-in-struct.html","title":"How to Get the Field Name of members in struct","lang":"en-US","frontmatter":{"category":["Research"],"date":"2022-08-17T00:00:00.000Z","modified":"2025-09-20T15:07:39.000Z","tags":["C_Cpp","LLVM"],"title":"How to Get the Field Name of members in struct","description":"What is Debug Info Read Source Level Debugging with LLVM for more details. If you do not have enough time, a few examples from the documentation should be enough. How to Generat...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to Get the Field Name of members in struct\\",\\"image\\":[\\"https://llvm.org/doxygen/classllvm_1_1DIType__inherit__graph.png\\"],\\"datePublished\\":\\"2022-08-17T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://github.com/liblaf\\"}]}"],["meta",{"property":"og:url","content":"https://hope.liblaf.me/2022/research/idea/2022-08-17-how-to-get-field-name-in-struct.html"}],["meta",{"property":"og:site_name","content":"liblaf"}],["meta",{"property":"og:title","content":"How to Get the Field Name of members in struct"}],["meta",{"property":"og:description","content":"What is Debug Info Read Source Level Debugging with LLVM for more details. If you do not have enough time, a few examples from the documentation should be enough. How to Generat..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://llvm.org/doxygen/classllvm_1_1DIType__inherit__graph.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:tag","content":"LLVM"}],["meta",{"property":"article:tag","content":"C_Cpp"}],["meta",{"property":"article:published_time","content":"2022-08-17T00:00:00.000Z"}]]},"git":{},"readingTime":{"minutes":2.59,"words":777},"filePathRelative":"2022/research/idea/2022-08-17-how-to-get-field-name-in-struct.md","excerpt":"<h2>What is Debug Info</h2>\\n<p>Read <a href=\\"https://llvm.org/docs/SourceLevelDebugging.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Source Level Debugging with LLVM</a> for more details. If you do not have enough time, a few examples from the documentation should be enough.</p>\\n<h2>How to Generate Debug Info</h2>","autoDesc":true}');export{h as comp,p as data};
