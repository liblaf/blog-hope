import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as e}from"./app-BMihMyie.js";const h={};function n(d,s){return e(),a("div",null,[...s[0]||(s[0]=[t(`<h2 id="分析-test-gmem-cu-的性能变化来源" tabindex="-1"><a class="header-anchor" href="#分析-test-gmem-cu-的性能变化来源"><span>分析 <code>test_gmem.cu</code> 的性能变化来源</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">__global__ </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> stride_copy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dst, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">src) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> blockIdx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> blockDim</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> threadIdx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  dst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> STRIDE] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> STRIDE];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.liblaf.me/img/2023/2023-02-24T050910Z.png" alt="Global Memory" loading="lazy"></p><h3 id="性能变化的主要来源是-gpu-的哪种机制引起的" tabindex="-1"><a class="header-anchor" href="#性能变化的主要来源是-gpu-的哪种机制引起的"><span>性能变化的主要来源是 GPU 的哪种机制引起的？</span></a></h3><p>访存合并机制.</p><h3 id="这种机制如何影响该程序的性能" tabindex="-1"><a class="header-anchor" href="#这种机制如何影响该程序的性能"><span>这种机制如何影响该程序的性能？</span></a></h3><p>在 DRAM, L2 cache, L1 cache 之间传输数据的最小单元为 1 sector = 32 Bytes. DRAM 访问总量为 <code>size * STRIDE * sizeof(float)</code> 与 <code>STRIDE</code> 成正比. 因此 <code>STRIDE</code> 越大, 程序访问的 transaction 个数越多, 且近似呈正比, 导致性能反比下降.</p><h3 id="是否有其他的硬件功能参与了该程序的执行过程-它们会如何影响该程序的执行效率" tabindex="-1"><a class="header-anchor" href="#是否有其他的硬件功能参与了该程序的执行过程-它们会如何影响该程序的执行效率"><span>是否有其他的硬件功能参与了该程序的执行过程, 它们会如何影响该程序的执行效率？</span></a></h3><p>cache. 顺序访问时, 数据会被缓存在 cache 中, 从而减少对 DRAM 的直接访问, 提升性能.</p><h2 id="分析-test-smem-cu-的性能变化来源" tabindex="-1"><a class="header-anchor" href="#分析-test-smem-cu-的性能变化来源"><span>分析 <code>test_smem.cu</code> 的性能变化来源</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">__global__ </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test_shmem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">BITWIDTH</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> __shared__ </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uint16_t</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> shm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">32</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> uint16_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tmp;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#elif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (BITWIDTH </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> __shared__ </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uint32_t</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> shm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">32</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tmp;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#elif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (BITWIDTH </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> __shared__ </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uint64_t</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> shm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">32</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> uint64_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tmp;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> times; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    tmp </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> shm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">threadIdx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> STRIDE];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.liblaf.me/img/2023/2023-02-24T050933Z.png" alt="Shared Memory" loading="lazy"></p><h3 id="固定-bitwidth-时-程序的性能变化来源于哪种硬件机制" tabindex="-1"><a class="header-anchor" href="#固定-bitwidth-时-程序的性能变化来源于哪种硬件机制"><span>固定 <code>BITWIDTH</code> 时, 程序的性能变化来源于哪种硬件机制？</span></a></h3><p>bank conflict.</p><h3 id="bitwidth-设置为-2-8-时性能变化的趋势相比于-bitwidth-设置为-4-时有什么不同之处-请解释" tabindex="-1"><a class="header-anchor" href="#bitwidth-设置为-2-8-时性能变化的趋势相比于-bitwidth-设置为-4-时有什么不同之处-请解释"><span><code>BITWIDTH</code> 设置为 2,8 时性能变化的趋势相比于 <code>BITWIDTH</code> 设置为 4 时有什么不同之处, 请解释.</span></a></h3><p><code>BITWIDTH</code> 设置为 4 时, bandwidth 随着 <code>STRIDE</code> 的增大而减小. <code>BITWIDTH</code> 设置为 2 时, <code>STRIDE</code> 为 1 和 2 时 bandwidth 几乎相等, 而后变化趋势与 <code>BITWIDTH</code> 设置为 4 时基本相同. <code>BITWIDTH</code> 设置为 8 时, <code>STRIDE</code> 为 16 和 32 时 bandwidth 几乎相等, 在这之前的变化趋势与 <code>BITWIDTH</code> 设置为 4 时基本相同.</p><p>当 <code>BITWIDTH</code> 为 4 时, 访存粒度为 4 Bytes = 1 bank, 相邻两个 thread 访问地址间隔为 <code>STRIDE</code> 个 bank. 当 <code>STRIDE</code> 为 1 时, 同一 wrap 内的 32 个 thread 访问了第一行内的 32 个 bank, 不存在 bank conflict. 当 <code>STRIDE</code> 为 2 时, <code>threadIdx.x</code> 与 <code>threadIdx.x + 16</code> 访问同一 bank, 发生 2-way bank conflict. 当 <code>STRIDE</code> 为 4 时, <code>threadIdx.x</code>, <code>threadIdx.x + 8</code>, <code>threadIdx.x + 16</code>, <code>threadIdx.x + 24</code> 访问同一个 bank, 发生 4-way bank conflict. 类似的, <code>STRIDE</code> 为 8 和 16 时分别发生 8-way bank conflict 和 16-way bank conflict.</p><p>当 <code>BITWIDTH</code> 为 2, <code>STRIDE</code> 为 1 时, 相邻两个 thread 访问同一个 bank, 发生 2-way bank conflict, 共访问 16 个 bank. 而 <code>STRIDE</code> 为 2 时, 虽然没有 bank conflict, 但需要访问 32 个 bank. 但由于每次访问仅使用 0.5 bank, 带宽为理论峰值的一半. 因此 <code>STRIDE</code> 为 1 或 2 时性能相近.</p><p>当 <code>BITWIDTH</code> 为 8, <code>STIRDE</code> 为 16 时, 相邻两个 thread 访存地址间隔为 128 Bytes, 恰为一行. 这意味着, 所有 thread 都访问 bank-0 和 bank-1, 发生 32-way bank conflict. 而当 <code>STRIDE</code> 为 32 时, 相邻两个 thread 访存地址间隔为 256 Bytes, 为两行, 此时所有 thread 仍都访问 bank-0 和 bank-1, 发生 32-way bank conflict. 因此 <code>STRIDE</code> 为 16 或 32 时性能相近.</p><h2 id="performance" tabindex="-1"><a class="header-anchor" href="#performance"><span>Performance</span></a></h2><h3 id="global-memory" tabindex="-1"><a class="header-anchor" href="#global-memory"><span>Global Memory</span></a></h3><table><thead><tr><th>Stride</th><th>Bandwidth (GB/s)</th></tr></thead><tbody><tr><td>1</td><td>530.015</td></tr><tr><td>2</td><td>182.471</td></tr><tr><td>4</td><td>91.9932</td></tr><tr><td>8</td><td>46.2866</td></tr></tbody></table><h3 id="shared-memory" tabindex="-1"><a class="header-anchor" href="#shared-memory"><span>Shared Memory</span></a></h3><table><thead><tr><th>Bitwidth</th><th>Stride</th><th>Bandwidth (GB/s)</th></tr></thead><tbody><tr><td>2</td><td>1</td><td>4258.05</td></tr><tr><td>2</td><td>2</td><td>4270.88</td></tr><tr><td>2</td><td>4</td><td>2149.69</td></tr><tr><td>2</td><td>8</td><td>831.405</td></tr><tr><td>2</td><td>16</td><td>427.135</td></tr><tr><td>2</td><td>32</td><td>215.022</td></tr><tr><td>4</td><td>1</td><td>8607.33</td></tr><tr><td>4</td><td>2</td><td>4315.77</td></tr><tr><td>4</td><td>4</td><td>2027.46</td></tr><tr><td>4</td><td>8</td><td>1012.86</td></tr><tr><td>4</td><td>16</td><td>504.37</td></tr><tr><td>4</td><td>32</td><td>251.766</td></tr><tr><td>8</td><td>1</td><td>8657.57</td></tr><tr><td>8</td><td>2</td><td>4339.44</td></tr><tr><td>8</td><td>4</td><td>2173.55</td></tr><tr><td>8</td><td>8</td><td>1087.65</td></tr><tr><td>8</td><td>16</td><td>544.069</td></tr><tr><td>8</td><td>32</td><td>544.068</td></tr></tbody></table>`,24)])])}const p=i(h,[["render",n]]),r=JSON.parse('{"path":"/2022/course-work/hpc/2022-05-23-exp7-cuda-%E4%BC%98%E5%8C%96-global-memory-shared-memory.html","title":"exp7: CUDA 优化 (global memory, shared memory)","lang":"en-US","frontmatter":{"category":["Course Work"],"date":"2022-05-23T00:00:00.000Z","modified":"2025-09-20T15:07:39.000Z","tags":["CUDA","Introduction_to_High_Performance_Computing"],"title":"exp7: CUDA 优化 (global memory, shared memory)","description":"分析 test_gmem.cu 的性能变化来源 Global Memory 性能变化的主要来源是 GPU 的哪种机制引起的？ 访存合并机制. 这种机制如何影响该程序的性能？ 在 DRAM, L2 cache, L1 cache 之间传输数据的最小单元为 1 sector = 32 Bytes. DRAM 访问总量为 size * STRIDE * si...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"exp7: CUDA 优化 (global memory, shared memory)\\",\\"image\\":[\\"https://cdn.liblaf.me/img/2023/2023-02-24T050910Z.png\\",\\"https://cdn.liblaf.me/img/2023/2023-02-24T050933Z.png\\"],\\"datePublished\\":\\"2022-05-23T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://github.com/liblaf\\"}]}"],["meta",{"property":"og:url","content":"https://hope.liblaf.me/2022/course-work/hpc/2022-05-23-exp7-cuda-%E4%BC%98%E5%8C%96-global-memory-shared-memory.html"}],["meta",{"property":"og:site_name","content":"liblaf"}],["meta",{"property":"og:title","content":"exp7: CUDA 优化 (global memory, shared memory)"}],["meta",{"property":"og:description","content":"分析 test_gmem.cu 的性能变化来源 Global Memory 性能变化的主要来源是 GPU 的哪种机制引起的？ 访存合并机制. 这种机制如何影响该程序的性能？ 在 DRAM, L2 cache, L1 cache 之间传输数据的最小单元为 1 sector = 32 Bytes. DRAM 访问总量为 size * STRIDE * si..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.liblaf.me/img/2023/2023-02-24T050910Z.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:tag","content":"Introduction_to_High_Performance_Computing"}],["meta",{"property":"article:tag","content":"CUDA"}],["meta",{"property":"article:published_time","content":"2022-05-23T00:00:00.000Z"}]]},"git":{},"readingTime":{"minutes":2.81,"words":843},"filePathRelative":"2022/course-work/hpc/2022-05-23-exp7-cuda-优化-global-memory-shared-memory.md","excerpt":"<h2>分析 <code>test_gmem.cu</code> 的性能变化来源</h2>\\n<div class=\\"language-cpp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"cpp\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-cpp\\"><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">__global__ </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">void</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> stride_copy</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">float</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> *</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">dst, </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">float</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> *</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">src) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">  int</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> i </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> blockIdx</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">x</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> *</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> blockDim</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">x</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> +</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> threadIdx</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">x</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">  dst</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">[i </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">*</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> STRIDE] </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> src</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">[i </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">*</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> STRIDE];</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{p as comp,r as data};
