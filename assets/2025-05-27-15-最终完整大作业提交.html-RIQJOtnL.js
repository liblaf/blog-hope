import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as c,o as l}from"./app-BMihMyie.js";const s={};function n(d,e){return l(),i("div",null,[...e[0]||(e[0]=[c(`<h1 id="tiny-rubik-s-cube" tabindex="-1"><a class="header-anchor" href="#tiny-rubik-s-cube"><span>Tiny Rubik’s Cube</span></a></h1><h2 id="_1-问题描述" tabindex="-1"><a class="header-anchor" href="#_1-问题描述"><span>1. 问题描述</span></a></h2><p>本次大作业的目标是开发一个带有图形用户界面的普通三阶魔方模拟程序. 具体要求如下:</p><ul><li><strong>魔方展示:</strong> 实现魔方的平移、放大、缩小功能, 并能自适应窗口大小进行展示.</li><li><strong>操作编码:</strong> 自定义一套编码系统, 用于表示魔方的各种基本操作 (例如, 前面顺时针旋转 90 度、顶面逆时针旋转 90 度等).</li><li><strong>文件交互:</strong><ul><li>实现打开文本文件的功能, 该文件包含一系列预定义的魔方操作编码.</li><li>程序能够读取这些编码并执行相应的魔方操作.</li></ul></li><li><strong>魔方操作:</strong><ul><li>支持用户通过交互界面执行单个魔方操作.</li><li>支持通过动画形式自动播放文件中的一系列操作.</li></ul></li><li><strong>动画效果:</strong> 在进行任何操作或转动魔方时, 必须以平滑的动画形式展示过程, 方便用户观察和理解.</li><li><strong>保存功能:</strong> 用户可以将当前的操作序列保存为文本文件, 文件内容为自定义的操作编码.</li><li><strong>文档编写:</strong> 详细介绍模拟算法、图形界面设计等内容.</li></ul><p>参考资料:《清华教授的小课堂魔方真好玩》 (雍俊海著, 清华大学出版社).</p><h2 id="_2-使用指南" tabindex="-1"><a class="header-anchor" href="#_2-使用指南"><span>2. 使用指南</span></a></h2><h3 id="_2-1-环境配置" tabindex="-1"><a class="header-anchor" href="#_2-1-环境配置"><span>2.1. 环境配置</span></a></h3><ol><li>安装 <a href="https://xmake.io/" target="_blank" rel="noopener noreferrer">xmake</a></li><li>安装 VS Code 并添加 C++ 扩展</li><li>克隆项目仓库: <code>git clone https://github.com/liblaf/tiny-rubiks-cube.git</code></li><li>安装依赖: <code>xmake require</code></li></ol><h3 id="_2-2-构建与运行" tabindex="-1"><a class="header-anchor" href="#_2-2-构建与运行"><span>2.2. 构建与运行</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 配置项目</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xmake</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --mode=debug</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 构建项目</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xmake</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 运行程序</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xmake</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-基本操作" tabindex="-1"><a class="header-anchor" href="#_2-3-基本操作"><span>2.3. 基本操作</span></a></h3><ol><li><strong>手动操作:</strong><ul><li>F/B/U/D/L/R: 旋转前面/后面/上面/下面/左面/右面</li><li>Shift + 按键: 逆时针旋转</li><li>F2: 重复上一次操作</li></ul></li><li><strong>记录与回放:</strong><ul><li>点击 “Record” 开始记录操作</li><li>执行一系列旋转操作</li><li>点击 “Stop Recording” 结束记录</li><li>点击 “Replay” 回放操作序列</li></ul></li><li><strong>文件操作:</strong><ul><li>操作序列保存在 <code>demo/actions.txt</code></li><li>格式示例: <code>F B U D L R R&#39; L&#39; D&#39; U&#39; B&#39; F&#39;</code></li></ul></li></ol><h3 id="_2-4-3d-视图控制" tabindex="-1"><a class="header-anchor" href="#_2-4-3d-视图控制"><span>2.4. 3D 视图控制</span></a></h3><ul><li><strong>旋转视图:</strong> 鼠标左键拖动</li><li><strong>平移视图:</strong> 鼠标右键拖动</li><li><strong>缩放视图:</strong> 鼠标滚轮</li><li><strong>重置视图:</strong> 按 R 键</li></ul><h2 id="_3-开发环境与工具" tabindex="-1"><a class="header-anchor" href="#_3-开发环境与工具"><span>3. 开发环境与工具</span></a></h2><p>为了完成这个项目, 我选择并配置了以下开发环境和工具:</p><ul><li><strong>操作系统:</strong> Linux</li><li><strong>集成开发环境 (IDE):</strong> Visual Studio Code (VS Code). VS Code 轻量且强大, 拥有丰富的插件生态, 非常适合 C++ 开发.</li><li><strong>构建系统:</strong> Xmake. Xmake 是一个基于 Lua 的现代化构建工具, 跨平台且易于使用, 能够简化项目的编译和依赖管理. 项目中的 <code>xmake.lua</code> 文件定义了项目的构建规则.</li><li><strong>语言服务器:</strong> Clangd. Clangd 为 VS Code 提供了强大的 C++ 语言支持, 如代码补全、语法检查、跳转定义等, 极大地提高了编码效率. 配置文件为 <code>.clangd</code>.</li><li><strong>代码格式化工具:</strong> Clang-Format. 为了保持代码风格的一致性, 我使用了 Clang-Format, 并根据 Google C++ Style Guide 进行了配置 (配置文件为 <code>.clang-format</code>).</li><li><strong>编程语言:</strong> C++20. 利用了 C++20 的一些现代特性.</li><li><strong>核心依赖库:</strong><ul><li><strong>Polyscope (v2.3):</strong> 这是一个用于 3D 数据可视化的 C++ 库, 支持快速构建交互式用户界面. 我主要用它来显示魔方模型和集成 ImGui 图形界面.</li><li><strong>ImGui:</strong> 一个轻量级的图形用户界面库, 我用它在 Polyscope 窗口中创建按钮、文本等交互元素.</li><li><strong>GLM (OpenGL Mathematics):</strong> 一个用于图形编程的数学库, 提供了向量、矩阵等数据结构和运算, 用于处理魔方块的变换 (旋转、位置).</li><li><strong>Eigen (v3.4.0):</strong> 另一个强大的 C++ 模板库, 用于线性代数运算, 主要在加载和处理模型顶点数据时使用.</li><li><strong>TinyObjLoader (v2.0.0rc13):</strong> 一个简单易用的 .obj 文件加载库, 我用它来加载魔方的 3D 模型.</li><li><strong>spdlog:</strong> 一个快速、头文件式的 C++ 日志库, 用于输出调试信息和程序运行状态.</li><li><strong>dbg-macro:</strong> 一个方便的 C++ 调试宏, 用于打印变量值等.</li></ul></li></ul><p>项目文件结构如下:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>demo/</span></span>
<span class="line"><span>  actions.txt       # 示例操作序列文件</span></span>
<span class="line"><span>src/</span></span>
<span class="line"><span>  action.cc         # 魔方操作逻辑实现</span></span>
<span class="line"><span>  action.h          # 魔方操作定义</span></span>
<span class="line"><span>  assets.cc         # 3D模型资源加载实现</span></span>
<span class="line"><span>  assets.h          # 3D模型资源加载定义</span></span>
<span class="line"><span>  cube.cc           # 整个魔方对象的实现</span></span>
<span class="line"><span>  cube.h            # 整个魔方对象的定义</span></span>
<span class="line"><span>  cubie.cc          # 单个魔方块 (“小方块”) 的实现</span></span>
<span class="line"><span>  cubie.h           # 单个魔方块的定义</span></span>
<span class="line"><span>  main.cc           # 程序主入口, GUI回调</span></span>
<span class="line"><span>  setup.cc          # Polyscope环境和魔方模型的初始化实现</span></span>
<span class="line"><span>  setup.h           # 初始化定义</span></span>
<span class="line"><span>  utils.cc          # 工具函数实现</span></span>
<span class="line"><span>  utils.h           # 工具函数定义</span></span>
<span class="line"><span>.clang-format       # 代码格式化配置</span></span>
<span class="line"><span>.clangd             # Clangd配置</span></span>
<span class="line"><span>.gitignore          # Git忽略文件配置</span></span>
<span class="line"><span>.repomixignore      # Repomix忽略文件配置 (项目提供的)</span></span>
<span class="line"><span>Justfile            # 简化xmake命令的脚本</span></span>
<span class="line"><span>xmake.lua           # Xmake构建配置文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-设计思路" tabindex="-1"><a class="header-anchor" href="#_4-设计思路"><span>4. 设计思路</span></a></h2><p>我的设计思路遵循模块化和事件驱动的原则, 力求代码结构清晰、易于扩展.</p><h3 id="_4-1-核心对象设计" tabindex="-1"><a class="header-anchor" href="#_4-1-核心对象设计"><span>4.1 核心对象设计</span></a></h3><p>程序的核心由以下几个类构成:</p><ul><li><strong><code>Cubie</code> (小方块):</strong><ul><li>代表组成魔方的 26 个可见小方块之一 (不包括中心轴).</li><li>每个 <code>Cubie</code> 存储其在魔方中的逻辑位置 (一个三维整数向量, 如 <code>(-1, -1, -1)</code> 表示一个角块) 和初始位置.</li><li>它还负责管理自身在 3D 空间中的变换矩阵 (<code>glm::mat4x4</code>) , 并与 Polyscope 中的对应 SurfaceMesh (表面网格, 即模型的一个小片) 关联.</li><li><code>Cubie</code> 知道如何根据给定的 <code>Action</code> 更新自己的变换 (用于动画) 和逻辑位置 (动画结束后).</li></ul></li><li><strong><code>Action</code> (操作):</strong><ul><li>定义了魔方的一次基本操作. 例如, &quot;F&quot;表示正面顺时针旋转 90 度.</li><li>包含操作的面 (<code>Side</code> 枚举: <code>FRONT</code>, <code>BACK</code>, <code>UP</code>, <code>DOWN</code>, <code>LEFT</code>, <code>RIGHT</code>) 和方向 (<code>clockwise</code> 布尔值, <code>true</code> 为顺时针).</li><li>提供了从字符 (如 ‘F’, ‘&#39;’) 解析操作的方法, 以及将操作转换为字符串的方法.</li><li>能够计算执行此操作所需的旋转轴和旋转角度.</li><li>可以从文本文件 (<code>demo/actions.txt</code>) 加载一系列操作, 也可以将一系列操作保存到文件.</li></ul></li><li><strong><code>Cube</code> (魔方整体):</strong><ul><li>这是魔方的中心控制器, 包含一个由 27 个 <code>Cubie</code> 组成的集合 (尽管中心块 <code>(0,0,0)</code> 可能不直接参与旋转, 但为了结构完整性会创建).</li><li>管理魔方的当前状态: <ul><li><code>IDLE</code> (空闲): 等待用户操作或指令.</li><li><code>ANIMATING</code> (动画中): 正在执行一个操作的动画.</li><li><code>RECORDING</code> (录制中): 用户进行的操作会被记录下来.</li><li><code>REPLAYING</code> (回放中): 正在自动播放一系列操作.</li></ul></li><li>存储当前正在执行的 <code>Action</code>, 以及录制的操作序列 (<code>std::deque&lt;Action&gt;</code>).</li><li>负责启动和更新动画. 当一个操作被触发时, 它会识别哪些 <code>Cubie</code> 需要参与这次旋转, 并通知它们开始动画.</li><li>动画是基于时间的, <code>Cube</code> 会计算动画进度, 并传递给相关的 <code>Cubie</code> 进行更新.</li></ul></li><li><strong><code>assets</code> (资源管理模块):</strong><ul><li>负责加载魔方的 3D 模型. 目前, 模型是从一个 <code>.obj</code> 文件 (<code>assets/cube.obj</code>) 加载的, 该文件由 <code>tinyobjloader</code> 库解析.</li></ul></li><li><strong><code>setup</code> (初始化模块):</strong><ul><li>负责初始化 Polyscope 环境, 例如设置背景、光照等.</li><li>将加载的 <code>.obj</code> 模型注册到 Polyscope 中, 并根据模型中各个小块的几何中心, 将它们组织成逻辑上的 <code>Cubie</code>. 每个 <code>Cubie</code> 在 Polyscope 中表现为一个 “group”, 包含构成该小块的若干个 “SurfaceMesh”.</li><li>设置地面平面, 使魔方看起来更自然.</li></ul></li><li><strong><code>utils</code> (工具模块):</strong><ul><li>包含一些辅助函数, 例如根据 <code>Cubie</code> 的逻辑位置生成其在 Polyscope 中的唯一名称.</li></ul></li></ul><h3 id="_4-2-用户界面-ui-与交互" tabindex="-1"><a class="header-anchor" href="#_4-2-用户界面-ui-与交互"><span>4.2 用户界面 (UI) 与交互</span></a></h3><ul><li>图形界面使用 Polyscope 内建支持的 ImGui 库.</li><li>在 <code>main.cc</code> 中定义了一个回调函数 <code>callback()</code>, Polyscope 会在每一帧调用它.</li><li><strong>显示信息:</strong> 在界面上显示魔方的当前状态 (如当前动作、是否在动画/录制/回放、已录制的动作序列).</li><li><strong>用户输入:</strong><ul><li><strong>键盘操作:</strong> 通过键盘按键 (F, B, U, D, L, R, 配合 Shift 键改变方向) 直接触发魔方转动.</li><li><strong>按钮操作:</strong><ul><li>“Replay” (回放): 允许用户选择一个包含操作序列的文本文件进行播放.</li><li>“Record” (录制): 开始记录用户的键盘操作.</li><li>“Save to File” (保存到文件): 将录制的操作序列保存到文本文件.</li><li>“Stop Recording” (停止录制): 结束录制状态.</li></ul></li></ul></li><li>Polyscope 自身提供了平移、缩放、旋转视角等基本的 3D 场景交互功能.</li></ul><h3 id="_4-3-动画实现" tabindex="-1"><a class="header-anchor" href="#_4-3-动画实现"><span>4.3 动画实现</span></a></h3><p>动画是逐帧更新的:</p><ol><li>当一个 <code>Action</code> 被触发时, <code>Cube</code> 对象标记自己进入 <code>ANIMATING</code> 状态, 并记录动画开始时间.</li><li>在每一帧的 <code>Cube::update()</code> 调用中, 计算从动画开始到现在所经过的时间, 并将其转换为一个进度值 <code>progress</code> (0.0 到 1.0).</li><li><code>Cube</code> 识别出需要参与当前 <code>Action</code> 的所有 <code>Cubie</code> (例如, 如果是 “F” 操作, 就是所有 Z 轴坐标为 1 的 <code>Cubie</code>).</li><li>对于每个参与动画的 <code>Cubie</code>, 调用其 <code>update(action, progress)</code> 方法.</li><li><code>Cubie::update()</code> 方法根据 <code>action</code> 和 <code>progress</code> 计算出一个临时的旋转变换矩阵, 并应用到其管理的 Polyscope SurfaceMesh 上, 从而在屏幕上看到小方块的转动. 这个旋转是基于该 <code>Cubie</code> 在本次操作开始前的原始姿态进行的插值旋转.</li><li>当 <code>progress</code> 达到 1.0 时, 动画结束. <code>Cube</code> 通知相关的 <code>Cubie</code> 调用 <code>end(action)</code> 方法, 该方法会更新 <code>Cubie</code> 的逻辑位置 (例如, 原本在 <code>(1,1,1)</code> 的角块, 经过 “F” 操作后, 其逻辑位置会变为 <code>(1,-1,1)</code>).</li><li><code>Cube</code> 清除 <code>ANIMATING</code> 状态. 如果正在 <code>REPLAYING</code> 状态且还有未执行的操作, 则自动开始下一个操作的动画.</li></ol><h3 id="_4-4-操作的编码与文件处理" tabindex="-1"><a class="header-anchor" href="#_4-4-操作的编码与文件处理"><span>4.4 操作的编码与文件处理</span></a></h3><ul><li><strong>编码:</strong><ul><li>基本面旋转: ‘F’ (Front), ‘B’ (Back), ‘U’ (Up), ‘D’ (Down), ‘L’ (Left), ‘R’ (Right).</li><li>方向: 默认顺时针. 字符后跟一个 <code>&#39;</code> (单引号) 表示逆时针 (例如 “F’”).</li><li>双次旋转: 字符后跟一个 ‘2’ 表示顺时针旋转 180 度 (在实现中, 这等同于执行两次相同的顺时针 90 度操作).</li><li>示例序列: <code>F B U D L R R&#39; L&#39; D&#39; U&#39; B&#39; F&#39;</code> (来自 <code>demo/actions.txt</code>)</li></ul></li><li><strong>文件读取:</strong> <code>Action::from_file(filepath)</code> 方法逐字符读取文件, 将编码转换为 <code>Action</code> 对象队列.</li><li><strong>文件保存:</strong> <code>Action::to_file(filepath, actions)</code> 方法将 <code>Action</code> 对象队列转换为上述编码字符串并写入文件.</li></ul><h2 id="_5-实现细节" tabindex="-1"><a class="header-anchor" href="#_5-实现细节"><span>5. 实现细节</span></a></h2><h3 id="_5-1-魔方模型的加载与设置-setup-cc-assets-cc" tabindex="-1"><a class="header-anchor" href="#_5-1-魔方模型的加载与设置-setup-cc-assets-cc"><span>5.1 魔方模型的加载与设置 (<code>setup.cc</code>, <code>assets.cc</code>)</span></a></h3><ol><li><strong>加载 OBJ 模型:</strong><ul><li><code>assets::load_cube()</code> 使用 <code>tinyobjloader::ObjReader</code> 解析 “assets/cube.obj” 文件. 这个 OBJ 文件应该包含了构成魔方的所有小面片 (比如每个小方块的 6 个面上的贴图部分).</li></ul></li><li><strong>注册到 Polyscope:</strong><ul><li><code>setup::register_cube()</code> 遍历 OBJ 文件中的所有形状 (shapes). 每个 shape 对应魔方上的一个小贴纸 (一个有颜色的面).</li><li>顶点数据 (<code>Eigen::MatrixX3f vertices</code>) 和面索引 (<code>std::vector&lt;std::vector&lt;int&gt;&gt; indices</code>) 被提取出来.</li><li>使用 <code>polyscope::registerSurfaceMesh()</code> 将每个 shape 注册为一个独立的表面网格.</li><li>从 OBJ 关联的 .mtl 文件中加载每个面的漫反射颜色, 并设置为 Polyscope 网格的面颜色 (<code>addFaceColorQuantity(&quot;diffuse&quot;, colors)</code>).</li></ul></li><li><strong>创建 Cubie 逻辑组 (<code>setup::create_groups()</code>):</strong><ul><li>三阶魔方可以看作是 3x3x3 的结构. 我们定义一个局部坐标系, 中心为 (0,0,0), 每个小方块的中心可以在 <code>{-1, 0, 1}</code> 的 x, y, z 坐标上.</li><li>该函数计算整个魔方模型的包围盒, 从而确定其中心和尺寸.</li><li>然后, 它遍历 Polyscope 中已注册的每个表面网格 (shape), 计算该网格的几何中心.</li><li>根据该几何中心相对于整个魔方中心的位置, 以及魔方单个小方块的理论尺寸, 推断出这个表面网格属于哪个逻辑 <code>Cubie</code> (其坐标如 <code>(1, -1, 0)</code>).</li><li>具有相同逻辑位置 <code>(x,y,z)</code> 的所有表面网格会被添加到一个以该位置命名的 Polyscope Group 中 (例如, 组名为 &quot; 1-1 0&quot;). 这个 Group 就代表一个 <code>Cubie</code>.</li></ul></li><li><strong>设置地面:</strong><ul><li><code>setup::setup_ground()</code> 计算魔方模型的最低点, 并在其下方设置一个虚拟地面, 使视觉效果更佳.</li></ul></li></ol><h3 id="_5-2-cubie-类-cubie-h-cubie-cc" tabindex="-1"><a class="header-anchor" href="#_5-2-cubie-类-cubie-h-cubie-cc"><span>5.2 <code>Cubie</code> 类 (<code>cubie.h</code>, <code>cubie.cc</code>)</span></a></h3><ul><li><strong>构造函数 <code>Cubie(glm::ivec3 location)</code>:</strong> 初始化 <code>Cubie</code> 的当前逻辑位置 <code>_location</code> 和初始逻辑位置 <code>_location_initial</code>. 初始位置用于生成其在 Polyscope 中的唯一名称.</li><li><strong><code>name()</code>:</strong> 返回基于 <code>_location_initial</code> 生成的字符串名称, 用于获取其在 Polyscope 中的 Group.</li><li><strong><code>group()</code>:</strong> 获取与此 <code>Cubie</code> 关联的 Polyscope Group.</li><li><strong><code>meshes()</code>:</strong> 获取此 <code>Cubie</code> Group 下的所有 Polyscope SurfaceMesh 指针.</li><li><strong><code>transform()</code>:</strong> 获取该 <code>Cubie</code> (具体来说是其 Group 下的第一个 mesh) 当前的变换矩阵.</li><li><strong><code>start()</code>:</strong> 在动画开始前调用, 保存当前 <code>Cubie</code> 的变换矩阵 <code>_start</code>. 动画将基于这个初始状态进行.</li><li><strong><code>update(Action action, float progress)</code>:</strong><ul><li>获取 <code>_start</code> 变换.</li><li>调用 <code>action.rotate(_start, progress)</code> 来计算当前进度下的插值变换. <code>Action::rotate(transform, progress)</code> 的实现是 <code>glm::rotate(progress * total_angle, axis) * initial_transform</code>.</li><li>将计算出的新变换应用到该 <code>Cubie</code> 的所有 <code>meshes</code> 上 (<code>mesh-&gt;setTransform(transform)</code>).</li></ul></li><li><strong><code>end(Action action)</code>:</strong> 动画结束时调用. 使用 <code>action.rotate(this-&gt;_location)</code> 来更新 <code>Cubie</code> 的逻辑位置 <code>_location</code>. 注意这里的 <code>action.rotate</code> 是重载版本, 用于旋转一个 <code>glm::ivec3</code> 类型的逻辑位置向量.</li></ul><h3 id="_5-3-action-类-action-h-action-cc" tabindex="-1"><a class="header-anchor" href="#_5-3-action-类-action-h-action-cc"><span>5.3 <code>Action</code> 类 (<code>action.h</code>, <code>action.cc</code>)</span></a></h3><ul><li><strong><code>Side</code> enum 和 <code>clockwise</code> bool:</strong> 定义了操作类型.</li><li><strong><code>axis_index()</code>:</strong> 根据 <code>Side</code> (如 <code>FRONT</code> 是 Z 轴) 返回对应的轴索引 (0 for X, 1 for Y, 2 for Z).</li><li><strong><code>direction()</code>:</strong> 根据 <code>Side</code> (如 <code>FRONT</code> 是 +1, <code>BACK</code> 是 -1) 返回在对应轴上的方向.</li><li><strong><code>rotate_angle()</code>:</strong> 根据 <code>clockwise</code> 返回旋转角度 (-90 或 +90 度, 转换为弧度).</li><li><strong><code>rotate_axis()</code>:</strong> 根据 <code>axis_index()</code> 和 <code>direction()</code> 构建一个标准化的旋转轴向量 (如 <code>(0,0,1)</code>).</li><li><strong><code>rotate(glm::ivec3 location) const</code>:</strong> 输入一个逻辑位置, 将其绕原点根据当前 <code>Action</code> 的定义旋转 90 度, 返回新的逻辑位置. 用于动画结束后更新 <code>Cubie</code> 的逻辑坐标.</li><li><strong><code>rotate(glm::mat4x4 transform, float progress) const</code>:</strong> 输入一个变换矩阵和动画进度, 返回基于进度插值旋转后的新变换矩阵. 用于实时更新 <code>Cubie</code> 的视觉表现.</li><li><strong><code>from_file(filepath)</code> 和 <code>to_file(filepath, actions)</code>:</strong> 实现操作序列的读写. <code>from_file</code> 会处理 ‘F’, ‘B’, ‘&#39;’, ‘2’ 等字符.</li></ul><h3 id="_5-4-cube-类-cube-h-cube-cc" tabindex="-1"><a class="header-anchor" href="#_5-4-cube-类-cube-h-cube-cc"><span>5.4 <code>Cube</code> 类 (<code>cube.h</code>, <code>cube.cc</code>)</span></a></h3><ul><li><strong>构造函数:</strong> 创建所有 27 个 <code>Cubie</code> 对象 (包括中心块 <code>(0,0,0)</code>, 尽管它不旋转, 但它的存在可能简化了某些逻辑或索引).</li><li><strong><code>_cubies</code>:</strong> 一个 <code>std::vector&lt;std::shared_ptr&lt;Cubie&gt;&gt;</code> 存储所有小方块.</li><li><strong><code>_state</code>:</strong> <code>IDLE</code>, <code>RECORDING</code>, <code>REPLAYING</code>.</li><li><strong><code>_animating</code>:</strong> 布尔值, 标记是否正在动画中.</li><li><strong><code>_action</code>:</strong> 当前正在执行或刚被设置的 <code>Action</code>.</li><li><strong><code>_animation_start</code>, <code>_duration</code>:</strong> 用于控制动画时间和进度.</li><li><strong><code>action(Action action)</code> (setter):</strong><ul><li>如果不在动画中, 则设置 <code>this-&gt;_action</code>.</li><li>如果当前是 <code>RECORDING</code> 状态, 将此 <code>action</code> 加入 <code>_actions</code> 队列.</li><li>设置 <code>_animating = true</code>, 记录 <code>_animation_start</code>.</li><li>调用 <code>animating_cubies()</code> 找到所有受此 <code>action</code> 影响的 <code>Cubie</code>.</li><li>对这些 <code>Cubie</code> 调用 <code>start()</code>, 让它们保存自己当前的变换状态.</li></ul></li><li><strong><code>animating_cubies()</code>:</strong><ul><li>根据当前 <code>_action</code> 的轴 (<code>axis_index()</code>) 和方向 (<code>direction()</code>), 遍历所有 <code>_cubies</code>.</li><li>如果一个 <code>Cubie</code> 的逻辑位置在对应轴上的分量等于 <code>action</code> 的方向值 (例如, F 面旋转, 轴是 Z, 方向是 +1, 则所有 <code>cubie-&gt;location().z == 1</code> 的小方块参与旋转) , 则将其加入返回列表.</li></ul></li><li><strong><code>update()</code>:</strong><ul><li>如果不在动画中 (<code>!this-&gt;animating()</code>), 直接返回.</li><li>计算动画进度 <code>progress</code>.</li><li>如果 <code>progress &gt;= 1.0</code> (动画完成): <ul><li>设置 <code>progress = 1.0</code>.</li><li>调用 <code>animate_end()</code>.</li><li>如果正在 <code>REPLAYING</code> 模式: <ul><li>如果 <code>_actions</code> 队列不为空, 取出下一个 <code>action</code> 并调用 <code>this-&gt;action(next_action)</code> 开始新的动画.</li><li>如果队列为空, 则回放结束, 设置状态为 <code>IDLE</code>.</li></ul></li></ul></li><li>对于 <code>animating_cubies()</code> 中的每个 <code>Cubie</code>, 调用 <code>cubie-&gt;update(this-&gt;action(), progress)</code>.</li></ul></li><li><strong><code>animate_end()</code>:</strong><ul><li>对于 <code>animating_cubies()</code> 中的每个 <code>Cubie</code>, 调用 <code>cubie-&gt;end(this-&gt;action())</code> 来更新其逻辑位置.</li><li>设置 <code>_animating = false</code>.</li></ul></li><li><strong><code>record_start()</code>, <code>record_end()</code>, <code>replay(actions)</code>:</strong> 管理录制和回放状态及操作队列.</li></ul><h3 id="_5-5-主程序与界面-main-cc" tabindex="-1"><a class="header-anchor" href="#_5-5-主程序与界面-main-cc"><span>5.5 主程序与界面 (<code>main.cc</code>)</span></a></h3><ul><li><strong><code>main()</code> 函数:</strong><ul><li>初始化 Polyscope (<code>polyscope::init()</code>).</li><li>加载魔方模型 (<code>cube::load_cube()</code>).</li><li>设置 Polyscope 环境和魔方模型 (<code>cube::setup(*obj)</code>).</li><li>创建一个 <code>std::shared_ptr&lt;cube::Cube&gt;</code> 实例.</li><li>将 <code>callback</code> 函数 (绑定了 <code>cube</code> 实例) 设置为 Polyscope 的用户回调 (<code>polyscope::state::userCallback = std::bind(callback, cube)</code>).</li><li>显示 Polyscope 窗口 (<code>polyscope::show()</code>).</li></ul></li><li><strong><code>callback(std::weak_ptr&lt;cube::Cube&gt; cube_wp)</code> 函数:</strong><ul><li>每帧调用 <code>cube-&gt;update()</code> 来驱动动画和逻辑更新.</li><li>使用 <code>ImGui::Text()</code> 显示魔方状态信息.</li><li>根据 <code>cube-&gt;state()</code> (IDLE, RECORDING, REPLAYING) 显示不同的 ImGui 按钮: <ul><li><strong>IDLE 状态:</strong> “Replay” 按钮 (使用 <code>polyscope::promptForFilename()</code> 获取文件路径, 然后 <code>Action::from_file()</code> 和 <code>cube-&gt;replay()</code>) 和 “Record” 按钮 (<code>cube-&gt;record_start()</code>).</li><li><strong>RECORDING 状态:</strong> “Save to File” 按钮 (使用 <code>polyscope::promptForFilename()</code> 获取文件路径, 然后 <code>Action::to_file()</code>) 和 “Stop Recording” 按钮 (<code>cube-&gt;record_end()</code>).</li><li>处理键盘输入:</li><li>检测 F, B, U, D, L, R 键是否按下 (<code>ImGui::IsKeyPressed()</code>).</li><li>检测 Shift 键是否按下 (<code>ImGui::IsKeyDown()</code>) 来确定旋转方向 (<code>clockwise</code>).</li><li>调用 <code>cube-&gt;action(cube::Action(...))</code> 来触发相应的魔方操作.</li></ul></li></ul></li></ul>`,42)])])}const r=o(s,[["render",n]]),p=JSON.parse('{"path":"/PhD/course/2024-2025_Spring_Term/84100253-Computer_Aided_Geometry_Modeling/2025-05-27-15-%E6%9C%80%E7%BB%88%E5%AE%8C%E6%95%B4%E5%A4%A7%E4%BD%9C%E4%B8%9A%E6%8F%90%E4%BA%A4.html","title":"最终完整大作业提交","lang":"en-US","frontmatter":{"date":"2025-05-27T08:05:00.000Z","modified":"2025-06-04T03:32:01.000Z","tags":["PhD/Course/Computer_Aided_Geometry_Modeling"],"title":"最终完整大作业提交","description":"Tiny Rubik’s Cube 1. 问题描述 本次大作业的目标是开发一个带有图形用户界面的普通三阶魔方模拟程序. 具体要求如下: 魔方展示: 实现魔方的平移、放大、缩小功能, 并能自适应窗口大小进行展示. 操作编码: 自定义一套编码系统, 用于表示魔方的各种基本操作 (例如, 前面顺时针旋转 90 度、顶面逆时针旋转 90 度等). 文件交互: ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"最终完整大作业提交\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-27T08:05:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://github.com/liblaf\\"}]}"],["meta",{"property":"og:url","content":"https://hope.liblaf.me/PhD/course/2024-2025_Spring_Term/84100253-Computer_Aided_Geometry_Modeling/2025-05-27-15-%E6%9C%80%E7%BB%88%E5%AE%8C%E6%95%B4%E5%A4%A7%E4%BD%9C%E4%B8%9A%E6%8F%90%E4%BA%A4.html"}],["meta",{"property":"og:site_name","content":"liblaf"}],["meta",{"property":"og:title","content":"最终完整大作业提交"}],["meta",{"property":"og:description","content":"Tiny Rubik’s Cube 1. 问题描述 本次大作业的目标是开发一个带有图形用户界面的普通三阶魔方模拟程序. 具体要求如下: 魔方展示: 实现魔方的平移、放大、缩小功能, 并能自适应窗口大小进行展示. 操作编码: 自定义一套编码系统, 用于表示魔方的各种基本操作 (例如, 前面顺时针旋转 90 度、顶面逆时针旋转 90 度等). 文件交互: ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:tag","content":"PhD/Course/Computer_Aided_Geometry_Modeling"}],["meta",{"property":"article:published_time","content":"2025-05-27T08:05:00.000Z"}]]},"git":{},"readingTime":{"minutes":14.93,"words":4479},"filePathRelative":"PhD/course/2024-2025_Spring_Term/84100253-Computer_Aided_Geometry_Modeling/2025-05-27-15-最终完整大作业提交.md","excerpt":"\\n<h2>1. 问题描述</h2>\\n<p>本次大作业的目标是开发一个带有图形用户界面的普通三阶魔方模拟程序. 具体要求如下:</p>\\n<ul>\\n<li><strong>魔方展示:</strong> 实现魔方的平移、放大、缩小功能, 并能自适应窗口大小进行展示.</li>\\n<li><strong>操作编码:</strong> 自定义一套编码系统, 用于表示魔方的各种基本操作 (例如, 前面顺时针旋转 90 度、顶面逆时针旋转 90 度等).</li>\\n<li><strong>文件交互:</strong>\\n<ul>\\n<li>实现打开文本文件的功能, 该文件包含一系列预定义的魔方操作编码.</li>\\n<li>程序能够读取这些编码并执行相应的魔方操作.</li>\\n</ul>\\n</li>\\n<li><strong>魔方操作:</strong>\\n<ul>\\n<li>支持用户通过交互界面执行单个魔方操作.</li>\\n<li>支持通过动画形式自动播放文件中的一系列操作.</li>\\n</ul>\\n</li>\\n<li><strong>动画效果:</strong> 在进行任何操作或转动魔方时, 必须以平滑的动画形式展示过程, 方便用户观察和理解.</li>\\n<li><strong>保存功能:</strong> 用户可以将当前的操作序列保存为文本文件, 文件内容为自定义的操作编码.</li>\\n<li><strong>文档编写:</strong> 详细介绍模拟算法、图形界面设计等内容.</li>\\n</ul>","autoDesc":true}');export{r as comp,p as data};
